#include "Framework/MeshData.hh"  
//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolumeICP {

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
ICPInductionBC<BASE>::
ICPInductionBC(const std::string& name) :
  BASE(name)
{
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
ICPInductionBC<BASE>::~ICPInductionBC()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void ICPInductionBC<BASE>::setup()
{
  BASE::setup();
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void ICPInductionBC<BASE>::setGhostState
(Framework::GeometricEntity *const face)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
  
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();
  const CFuint nbPrevEqs = totalNbEqs - 2;
  const CFuint nbEqs = PhysicalModelStack::getActive()->getEquationSubSysDescriptor().getNbEqsSS();
  
  if (nbEqs >= nbPrevEqs) {
    BASE::setGhostState(face);
  }
  
  // here it is assumed that the ICP induction equations are the last ones 
  if (nbEqs == 2 || nbEqs > nbPrevEqs) {
    State *const innerState = face->getState(0);
    State *const ghostState = face->getState(1);
    
    ///@TODO assumption r=y !! everywhere in the code ...
    const CFreal rI = innerState->getCoordinates()[YY];
    const CFuint epR = innerState->size() - 2;
    const CFuint epI = innerState->size() - 1;
    const CFreal rRatio = rI/ghostState->getCoordinates()[YY];
    // cf_assert(rRatio > 0.);
    
    (*ghostState)[epR] =  rRatio*(*innerState)[epR];
    (*ghostState)[epI] =  rRatio*(*innerState)[epI];
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
