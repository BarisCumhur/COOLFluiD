#include "Heat/Heat.hh"
#include "Framework/State.hh"
#include "Heat3D.hh"
#include "Environment/ObjectProvider.hh"

//////////////////////////////////////////////////////////////////////////////

using namespace COOLFluiD::Framework;

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace Heat {

//////////////////////////////////////////////////////////////////////////////

Environment::ObjectProvider<Heat3D, PhysicalModelImpl, HeatModule, 1> heat3DProvider("Heat3D");

//////////////////////////////////////////////////////////////////////////////

Heat3D::Heat3D(const std::string& name)
  : HeatPhysicalModel(name)
{
}

//////////////////////////////////////////////////////////////////////////////

Heat3D::~Heat3D()
{
}

//////////////////////////////////////////////////////////////////////////////

void Heat3D::configure ( Config::ConfigArgs& args )
{
  HeatPhysicalModel::configure(args);

  /// @note Should be here, but is not yet being used.
  _jacobians = std::vector<RealMatrix>(getDimension());
  for (CFuint i = 0; i < getDimension(); ++i) {
    _jacobians[i] = RealMatrix(getNbEquations(), getNbEquations());
    _jacobians[i] = 0.0;
  }

  m_nbDim = getDimension();
  m_nbEqs = getNbEquations();

  m_variables.resize(m_nbDim + m_nbEqs);

}

//////////////////////////////////////////////////////////////////////////////

CFuint Heat3D::getDimension() const
{
  return 3;
}

//////////////////////////////////////////////////////////////////////////////

CFuint Heat3D::getNbEquations() const
{
  return 1;
}

//////////////////////////////////////////////////////////////////////////////

bool Heat3D::validate(const State& state) const
{
  return state[0] >= 0.0;
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace Heat

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
