#include "CoupledNeumannEntity.hh"
#include "Framework/IntegrableEntity.hh"
#include "Framework/VectorialFunction.hh"
#include "Framework/SubSystemStatus.hh"
#include "Framework/GeometricEntity.hh"

//////////////////////////////////////////////////////////////////////////////

using namespace COOLFluiD::Framework;

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteElement {

//////////////////////////////////////////////////////////////////////////////

using namespace std;
using namespace COOLFluiD::Framework;

//////////////////////////////////////////////////////////////////////////////

CoupledNeumannEntity::CoupledNeumannEntity(const std::string& name) :
NeumannEntity(name),
_index(0),
_isAcceptedIdx(0),
_interfaceData(CFNULL),
_isAccepted(CFNULL),
_isRobin(false)
{
}

//////////////////////////////////////////////////////////////////////////////

CoupledNeumannEntity::~CoupledNeumannEntity()
{
}

//////////////////////////////////////////////////////////////////////////////

void CoupledNeumannEntity::setup()
{
  NeumannEntity::setup();

  _varsRobin.resize(2*PhysicalModelStack::getActive()->getNbEq());
}

//////////////////////////////////////////////////////////////////////////////


    } // namespace COOLFluiD

  } // namespace Numerics

} // namespace FiniteElement

//////////////////////////////////////////////////////////////////////////////

