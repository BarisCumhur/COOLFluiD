// Copyright (C) 2012 von Karman Institute for Fluid Dynamics, Belgium
//
// This software is distributed under the terms of the
// GNU Lesser General Public License version 3 (LGPLv3).
// See doc/lgpl.txt and doc/gpl.txt for the license text.

namespace COOLFluiD {
  namespace Physics {
namespace LinearAdv {

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void AdvectionDiffusionPhysicalModel<DIM>::defineConfigOptions(Config::OptionList& options)
{
   options.template addConfigOption< CFreal >("VY","Advection speed in Y direction.");
   options.template addConfigOption< CFreal >("VX","Advection speed in X direction.");
   options.template addConfigOption< CFreal >("VZ","Advection speed in X direction.");
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
AdvectionDiffusionPhysicalModel<DIM>::AdvectionDiffusionPhysicalModel(const std::string& name)
  : Framework::ConvectionDiffusionPM<LinearAdvTerm, ADTerm>(name)
{

   addConfigOptionsTo(this);

   m_VX = 0.0;
   setParameter("VX",&m_VX);

   m_VY = 0.0;
   setParameter("VY",&m_VY);

   m_VZ = 1.0;
   setParameter("VZ",&m_VZ);


}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
AdvectionDiffusionPhysicalModel<DIM>::~AdvectionDiffusionPhysicalModel()
{
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint AdvectionDiffusionPhysicalModel<DIM>::getDimension() const
{
  return DIM;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint AdvectionDiffusionPhysicalModel<DIM>::getNbEquations() const
{
  return 1;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string AdvectionDiffusionPhysicalModel<DIM>::getConvectiveName() const
{
  if (DIM == 2) return "LinearAdv2D";
  cf_assert (DIM == 3);
  return "LinearAdv3D";
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string AdvectionDiffusionPhysicalModel<DIM>::getDiffusiveName() const
{
  return getTypeName();
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void AdvectionDiffusionPhysicalModel<DIM>::configure ( Config::ConfigArgs& args )
{
  Framework::ConvectionDiffusionPM<LinearAdvTerm, ADTerm>::configure(args);

  cf_assert (getDimension() > 0);
  cf_assert (getNbEquations() > 0);

  // allocate jacobians
  _jacobians = std::vector<RealMatrix>(DIM);
  for (CFuint i = 0; i < getDimension(); ++i) {
    _jacobians[i].resize(getNbEquations(), getNbEquations());
  }
  _jacobians[XX] = m_VX;
  if (DIM > DIM_1D) {
    _jacobians[YY] = m_VY;
  }
  if (DIM > DIM_2D) {
    _jacobians[ZZ] = m_VZ;
  }
}

//////////////////////////////////////////////////////////////////////////////

} // namespace LinearAdv
}
} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

