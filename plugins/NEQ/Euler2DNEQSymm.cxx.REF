#include "NEQ.hh"
#include "Euler2DNEQSymm.hh"
#include "Common/NotImplementedException.hh"
#include "Environment/ObjectProvider.hh"
#include "Framework/PhysicalChemicalLibrary.hh"

//////////////////////////////////////////////////////////////////////////////

using namespace std;
using namespace COOLFluiD::Framework;
using namespace COOLFluiD::Common;
using namespace COOLFluiD::Physics::NavierStokes;

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace NEQ {

//////////////////////////////////////////////////////////////////////////////

Environment::ObjectProvider<Euler2DNEQSymm, ConvectiveVarSet, NEQModule, 1>
euler2DNEQSymmProvider("Euler2DNEQSymm");

//////////////////////////////////////////////////////////////////////////////

Euler2DNEQSymm::Euler2DNEQSymm(Common::SafePtr<BaseTerm> term) :
  MultiScalarVarSet<Euler2DVarSet>(term),//This sequence is an initialization.
  _library(CFNULL),
  _Rgas(),
  _dhe(3),
  _ys(),
  _rightEv(),
  _leftEv(),
  _alpha(),
  _RiGas(),
  _mmasses(),
  _fcoeff()
{
  const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  const CFuint nbTv = getModel()->getNbScalarVars(1);
  
  vector<std::string> names(nbSpecies + 3 + nbTv);
  for (CFuint ie = 0; ie < nbSpecies; ++ie) {
    names[ie] = "rho" + StringOps::to_str(ie);
  }
  names[nbSpecies]     = "rhoU";
  names[nbSpecies + 1] = "rhoV";
  names[nbSpecies + 2] = "rhoE";
  
  const CFuint startTv = nbSpecies + 3; 
  for (CFuint ie = 0; ie < nbTv; ++ie) {
    names[startTv + ie] = "rhoEv" + StringOps::to_str(ie);
  }
  
  setVarNames(names);
}

//////////////////////////////////////////////////////////////////////////////

Euler2DNEQSymm::~Euler2DNEQSymm()
{
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::computeEigenValuesVectors(RealMatrix& rightEv,
                                           RealMatrix& leftEv,
                                           RealVector& eValues,
                                           const RealVector& normal)
{
  const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  const CFuint nbTv = getModel()->getNbScalarVars(1);
  cf_assert(nbTv == 1);

  const RealVector& lData = getModel()->getPhysicalData();
  SafePtr<PhysicalChemicalLibrary::ExtraData> eData = _library->getExtraData();

  const CFreal T = lData[EulerTerm::T];
  
  // this is inconsistent with Prabhu's linearization
  //  const CFreal rho = lData[EulerTerm::RHO];
  //const CFreal p = lData[EulerTerm::P];
  //const CFreal cvTr = eData->dEdT;
  //const CFreal beta = p/(rho*T)/cvTr;
  
  const CFuint firstSpecies = getModel()->getFirstScalarVar(0);
  ////////////////////////
  const CFuint nbSp  = nbSpecies;
  const CFuint nbSpPlus1 = nbSpecies+1;
  const CFuint nbSpPlus2 = nbSpecies+2;
  const CFuint nbSpPlus3 = nbSpecies+3;
  /////////////////////////

  CFreal sumAlphaYs = 0.0;
  
  cf_assert(_ys.size() == nbSpecies);
  cf_assert(_alpha.size() == nbSpecies);
  //  cf_assert(p > 0.0);
  cf_assert(T > 0.0);
  //cf_assert(rho > 0.0);

  CFreal numBeta = 0.;
  CFreal denBeta = 0.;

  for (CFuint i = 0; i < nbSpecies; ++i) {
    const CFreal sigmai = lData[firstSpecies + i]/_mmasses[i];
    numBeta += sigmai;
    denBeta += sigmai*_fcoeff[i];
  }//Note: The definition of beta should NEVER include a contribution from the electrons (see in Gnoffo,Gupta,Shinn).
  
  const CFreal beta = numBeta/denBeta;
  const CFreal phi = -beta; // This definition of phi does not account for gas ionization.
  const CFreal nx = normal[XX];
  const CFreal ny = normal[YY];
  const CFreal rho = lData[EulerTerm::RHO];
  const CFreal u = lData[EulerTerm::VX];
  const CFreal v = lData[EulerTerm::VY];

  const CFreal V2 = lData[EulerTerm::V]*lData[EulerTerm::V];
  const CFreal q = 0.5*V2;
  const CFreal bq = beta*q;
  const CFreal V = v*nx -u*ny;
  const CFreal H = lData[EulerTerm::H];
  const CFuint firstTv = getModel()->getFirstScalarVar(1);
  const CFreal ev = lData[firstTv];
  //  const CFreal a2 = (1. + beta)*p/rho;
  // const CFreal a = sqrt(a2);
  const CFreal a = lData[EulerTerm::A];
  const CFreal a2 = lData[EulerTerm::A]*lData[EulerTerm::A];
  const CFreal ova = 1./a;
  const CFreal ova2 = 1./a2;
  
  const CFreal U = u*nx + v*ny;

  for (CFuint is = 0; is < nbSpecies; ++is) {
    _ys[is] = lData[firstSpecies + is];
    
    if (_ys[is] > 1.1) {
      cout << "_ys > 1.1 = " << _ys << endl;
      // cf_assert(_ys[is] <= 1.1);
    }
    _alpha[is] = _RiGas[is]*T + bq - beta*((eData->energyTr)[is])-phi*((eData->energyVib)[is]); //We've added here the contributions of the dynamic pressure and species vibrational energy!!!//_alpha[is] = _RiGas[is]*T - beta*((eData->energyTr)[is]);
    sumAlphaYs += _alpha[is]*_ys[is];
  }
  
  // rightEv = 0.0;
  // leftEv = 0.0;
  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      const CFreal minusRhoDelta = (js != is) ? 0.0 : -rho; 
      rightEv(is, js) = minusRhoDelta;
    }
    
    rightEv(is,nbSp) = 0.0;
    rightEv(is,nbSpPlus1) = 0.0;
    rightEv(is,nbSpPlus2) = 0.0;
    rightEv(is,nbSpPlus3) = 0.0;

    rightEv(nbSp,is) = 0.0;
    rightEv(nbSpPlus1,is) = 0.0;
    rightEv(nbSpPlus2,is) = 0.0;
    rightEv(nbSpPlus3,is) = ev;
  }

  rightEv(nbSp,nbSp) = -ny;
  rightEv(nbSp,nbSpPlus1) = 0.5*ova*nx;
  rightEv(nbSp,nbSpPlus2) = -0.5*ova*nx;
  rightEv(nbSp,nbSpPlus3)=0.0;

  rightEv(nbSpPlus1,nbSp) = nx;
  rightEv(nbSpPlus1,nbSpPlus1) = 0.5*ova*ny; 
  rightEv(nbSpPlus1,nbSpPlus2) = -0.5*ova*ny;
  rightEv(nbSpPlus1,nbSpPlus3)=0.0;

  rightEv(nbSpPlus2,nbSp) = 0.0;
  rightEv(nbSpPlus2,nbSpPlus1) = 0.5*ova;
  rightEv(nbSpPlus2,nbSpPlus2) = 0.5*ova;
  rightEv(nbSpPlus2,nbSpPlus3) = 0.0;

  rightEv(nbSpPlus3,nbSp) = 0.0;
  rightEv(nbSpPlus3,nbSpPlus1) = 0.5*ev;
  rightEv(nbSpPlus3,nbSpPlus2) = 0.5*ev;
  rightEv(nbSpPlus3,nbSpPlus3) = -1.0;

  rightEv /= rho;//rightEv checked on 2009/3/30.

  //  cout << "R = "<< endl;
  //   cout << rightEv << endl <<endl;

  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      const CFreal minusdelta = (js != is) ? 0.0 : -1.0;
      leftEv(is,js) = minusdelta;
    }//This could be simplified.

    leftEv(is,nbSp) = 0.0;
    leftEv(is,nbSpPlus1) = 0.0;
    leftEv(is,nbSpPlus2) = 0.0;
    leftEv(is,nbSpPlus3) = 0.0;

    leftEv(nbSp,is) = 0.0;
    leftEv(nbSpPlus1,is) = 0.0;
    leftEv(nbSpPlus2,is) = 0.0;
    leftEv(nbSpPlus3,is) = -ev;
  }

  leftEv(nbSp,nbSp) = -rho*ny;
  leftEv(nbSp,nbSpPlus1) = rho*nx;
  leftEv(nbSp,nbSpPlus2) = 0.0;
  leftEv(nbSp,nbSpPlus3) = 0.0;

  leftEv(nbSpPlus1,nbSp) = rho*a*nx;
  leftEv(nbSpPlus1,nbSpPlus1) = rho*a*ny;
  leftEv(nbSpPlus1,nbSpPlus2) = rho*a;
  leftEv(nbSpPlus1,nbSpPlus3) = 0.0;

  leftEv(nbSpPlus2,nbSp) = -rho*a*nx;
  leftEv(nbSpPlus2,nbSpPlus1) = -rho*a*ny;
  leftEv(nbSpPlus2,nbSpPlus2) = rho*a;
  leftEv(nbSpPlus2,nbSpPlus3) = 0.0;

  leftEv(nbSpPlus3,nbSp) = 0.0;
  leftEv(nbSpPlus3,nbSpPlus1) = 0.0;
  leftEv(nbSpPlus3,nbSpPlus2) = rho*ev*a;
  leftEv(nbSpPlus3,nbSpPlus3) = -rho;//leftEv checked on 2009/3/30.

  eValues = U;
  eValues[nbSpPlus1] += a;
  eValues[nbSpPlus2] -= a;//eValues checked on 2009/3/30.
}

//////////////////////////////////////////////////////////////////////////////

CFuint Euler2DNEQSymm::getBlockSeparator() const
{
  return Framework::PhysicalModelStack::getActive()->getNbEq();
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::splitJacobian(RealMatrix& jacobPlus,
                                RealMatrix& jacobMin,
                                RealVector& eValues,
                                const RealVector& normal)
{
  const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  const CFuint nbTv = getModel()->getNbScalarVars(1);
  cf_assert(nbTv == 1);
  
  const RealVector& lData = getModel()->getPhysicalData();
  SafePtr<PhysicalChemicalLibrary::ExtraData> eData = _library->getExtraData();
    
  const CFreal T = lData[EulerTerm::T];
  const CFreal rho = lData[EulerTerm::RHO];
  const CFreal p = lData[EulerTerm::P];
  const CFreal cvTr = eData->dEdT;
  const CFreal R = p/(rho*T);//Numerical evaluation of the perfect gases constant.
  //const CFreal beta = p/(rho*T)/cvTr;
  
  const CFuint firstSpecies = getModel()->getFirstScalarVar(0);

  CFreal numBeta = 0.;
  CFreal denBeta = 0.;

  for (CFuint i = 0; i < nbSpecies; ++i) {
    const CFreal sigmai = lData[firstSpecies + i]/_mmasses[i];
    numBeta += sigmai;
    denBeta += sigmai*_fcoeff[i];
  }//Note: The definition of beta should NEVER include a contribution from the electrons (see in Gnoffo,Gupta,Shinn).

  const CFreal beta = numBeta/denBeta;
  const CFreal phi = -beta;//The present definition of phi neglects the ionization of the plasma.
  
  CFreal sumAlphaYs = 0.0;
     
  if (p <= 0) {
    cout << "_ys = " << _ys << endl;
    cout << "rho = " << rho << endl;
    cout << "T   = " << T << endl;
    cout << "p   = " << p << endl;
    cout << "cvTr= " << cvTr << endl << endl;
    cf_assert(p > 0.0);
  }
  
  cf_assert(T > 0.0);
  cf_assert(rho > 0.0);
        
  const CFreal nx = normal[XX];
  const CFreal ny = normal[YY];
  const CFreal u = lData[EulerTerm::VX];
  const CFreal v = lData[EulerTerm::VY];
  const CFreal V2 = lData[EulerTerm::V]*lData[EulerTerm::V];
  const CFreal q = 0.5*V2;
  const CFreal bq = beta*q;  
  const CFreal V = v*nx -u*ny;
  const CFreal H = lData[EulerTerm::H];
  const CFuint firstTv = getModel()->getFirstScalarVar(1);
  const CFreal ev = lData[firstTv];
  const CFreal a2 = (1. + beta)*p/rho;
  const CFreal a = sqrt(a2);
  //const CFreal a = lData[EulerTerm::A];
  //const CFreal a2 = lData[EulerTerm::A]*lData[EulerTerm::A];
  const CFreal ova = 1./a;
  const CFreal ova2 = 1./a2;

  const CFreal U = u*nx + v*ny;
  
  const CFuint nbSp = nbSpecies;
  const CFuint nbSpPlus1 = nbSpecies+1; 
  const CFuint nbSpPlus2 = nbSpecies+2; 
  const CFuint nbSpPlus3 = nbSpecies+3;
  ////////////////////////
  const CFuint uID  = nbSpecies;
  const CFuint vID  = nbSpecies+1;
  const CFuint eID  = nbSpecies+2;
  const CFuint evID = nbSpecies+3;
  /////////////////////////
  
  cf_assert(_ys.size() == nbSpecies); 
  cf_assert(_alpha.size() == nbSpecies);
  
  for (CFuint is = 0; is < nbSpecies; ++is) {
    _ys[is] = lData[firstSpecies + is];
    /*if (is==1){
      _ys[0]=1.0;
      _ys[1]=0.0;
          cout << "The mass fraction of species "<< is << " has been set to "<< _ys[is]<< endl;
	  }*/ //Debugging purposes.

      
    /*if (_ys[is] > 1.0) {
      cout << "_ys = " << _ys << endl;
      cout << "rho = " << rho << endl;
      cout << "T   = " << T << endl;
      cout << "p   = " << p << endl;
      cout << "cvTr= " << cvTr << endl << endl;
      //  cf_assert(_ys[is] <= 1.0);
    }*/
    
    _alpha[is] = _RiGas[is]*T + bq - beta*((eData->energyTr)[is])-phi*((eData->energyVib)[is]); //We've added here the contributions of the dynamic pressure and species vibrational energy!!!
    sumAlphaYs += _alpha[is]*_ys[is];   
  }
 
  //_rightEv = 0.0;
  //_leftEv = 0.0;

  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      const CFreal minusRhoDelta = (js != is) ? 0.0 : -rho; 
      _rightEv(is, js) = minusRhoDelta;
    }
    
    _rightEv(is,nbSp) = 0.0;
    _rightEv(is,nbSpPlus1) = 0.0;
    _rightEv(is,nbSpPlus2) = 0.0;
    _rightEv(is,nbSpPlus3) = 0.0;


    _rightEv(nbSp,is) = 0.0;
    _rightEv(nbSpPlus1,is) = 0.0;
    _rightEv(nbSpPlus2,is) = 0.0;
    _rightEv(nbSpPlus3,is) = ev;
  }  
  
  _rightEv(nbSp,nbSp) = -ny;
  _rightEv(nbSp,nbSpPlus1) = 0.5*nx*ova;
  _rightEv(nbSp,nbSpPlus2) = -0.5*nx*ova;
  _rightEv(nbSp,nbSpPlus3) = 0.0;

  _rightEv(nbSpPlus1,nbSp) = nx;
  _rightEv(nbSpPlus1,nbSpPlus1) = 0.5*ny*ova;
  _rightEv(nbSpPlus1,nbSpPlus2) = -0.5*ny*ova;
  _rightEv(nbSpPlus1,nbSpPlus3) = 0.0;  

  _rightEv(nbSpPlus2,nbSp) = 0.0;
  _rightEv(nbSpPlus2,nbSpPlus1) = 0.5*ova;
  _rightEv(nbSpPlus2,nbSpPlus2) = 0.5*ova;
  _rightEv(nbSpPlus2,nbSpPlus3) = 0.0;
  
  _rightEv(nbSpPlus3,nbSp) = 0.0;
  _rightEv(nbSpPlus3,nbSpPlus1) = 0.5*ev;
  _rightEv(nbSpPlus3,nbSpPlus2) = 0.5*ev;
  _rightEv(nbSpPlus3,nbSpPlus3) = -1.0;
  
  _rightEv /= rho;//_rightEv checked on 2009/3/30.
  //
  //cout << "R = "<< endl;
  //cout << _rightEv << endl <<endl;
  //
  
  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      const CFreal minusdelta = (js != is) ? 0.0 : -1.0; 
      _leftEv(is,js) = minusdelta;
    }//This could be simplified.
    
    _leftEv(is,nbSp) = 0.0;
    _leftEv(is,nbSpPlus1) = 0.0;
    _leftEv(is,nbSpPlus2) = 0.0;
    _leftEv(is,nbSpPlus3) = 0.0;
        
    _leftEv(nbSp,is) = 0.0;
    _leftEv(nbSpPlus1,is) = 0.0;
    _leftEv(nbSpPlus2,is) = 0.0;
    _leftEv(nbSpPlus3,is) = -ev;
  }  
  
  _leftEv(nbSp,nbSp) = -rho*ny;
  _leftEv(nbSp,nbSpPlus1) = rho*nx;
  _leftEv(nbSp,nbSpPlus2) = 0.0;
  _leftEv(nbSp,nbSpPlus3) = 0.0;

  
  _leftEv(nbSpPlus1,nbSp) = rho*a*nx;
  _leftEv(nbSpPlus1,nbSpPlus1) = rho*a*ny;
  _leftEv(nbSpPlus1,nbSpPlus2) = rho*a;
  _leftEv(nbSpPlus1,nbSpPlus3) = 0.0;
  
  _leftEv(nbSpPlus2,nbSp) = -rho*a*nx;
  _leftEv(nbSpPlus2,nbSpPlus1) = -rho*a*ny;
  _leftEv(nbSpPlus2,nbSpPlus2) = rho*a;
  _leftEv(nbSpPlus2,nbSpPlus3) = 0.0;
  
  _leftEv(nbSpPlus3,nbSp) = 0.0; 
  _leftEv(nbSpPlus3,nbSpPlus1) = 0.0;
  _leftEv(nbSpPlus3,nbSpPlus2) = rho*ev*a;
  _leftEv(nbSpPlus3,nbSpPlus3) = -rho;//_leftEv checked on 2009/3/30.
  
  //Comment back from here to
  //cout << "L = "<< endl;
  //cout << _leftEv << endl <<endl;
  
  //RealMatrix mat(_rightEv.nbRows(), _leftEv.nbRows());
  //mat= _rightEv*_leftEv;
  //cout <<"R*L" << endl;
  //cout << mat << endl << endl;
  
  //mat = _leftEv*_rightEv;
  //cout <<"L*R" << endl;
  //cout << mat << endl << endl;// matrices _leftEv & _rightEv are the inverse of the other.
  //here
  
  eValues = U;
  eValues[nbSpPlus1] += a;
  eValues[nbSpPlus2] -= a;
//Beginning of debugging code:
 RealMatrix jacobQ(_rightEv.nbRows(), _leftEv.nbRows());
 jacobQ = 0.0;
   
  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      const CFreal Udelta = (js != is) ? 0.0 : U; 
      jacobQ(is,js) = Udelta;
    }
    jacobQ(is,uID) = 0.0;
    jacobQ(is,vID) = 0.0;
    jacobQ(is,eID) = 0.0;
    jacobQ(is,evID) = 0.0;
    
    jacobQ(uID,is) = 0.0;
    jacobQ(vID,is) = 0.0;
    jacobQ(eID,is) = 0.0;
    jacobQ(evID,is) = 0.0;
  }
  
  jacobQ(uID,uID) = U;
  jacobQ(uID,vID) = 0.0;
  jacobQ(uID,eID) = a*nx;
  jacobQ(uID,evID) = 0.0;
  
  jacobQ(vID,uID) = 0.0;
  jacobQ(vID,vID) = U;
  jacobQ(vID,eID) = a*ny;
  jacobQ(vID,evID) = 0.0;
  
  jacobQ(eID,uID) = a*nx;
  jacobQ(eID,vID) = a*ny;
  jacobQ(eID,eID) = U;
  jacobQ(eID,evID) = 0.0;
  
  jacobQ(evID,uID) = ev*a2*nx;
  jacobQ(evID,vID) = ev*a2*ny;
  jacobQ(evID,eID) = 0.0;
  jacobQ(evID,evID) = U;//jacobQ checked on 2009/3/30.

  RealMatrix m1(nbSpecies+4,nbSpecies+4);
  RealMatrix m2(nbSpecies+4,nbSpecies+4);
  //
  m1 = jacobQ*_rightEv;
  m2 = _leftEv*m1;
  
  cout << "lambda M = " << endl;
  cout << m2 << endl;
  cout << "lambda = " << eValues << endl << endl; 
  //up to here: the matrix m2 is diagonal with entries the eigenvalues of the convective jacobian; checked on 2009/3/30.

  //Now we need dU/dQ and dQ/dU.
  
  // First define dU/dQ, that is, SymmToCons:
  
  // find a way of storing this pointer (sdd setup() function)
  static Common::SafePtr<PhysicalChemicalLibrary> library =
    PhysicalModelStack::getActive()->getImplementor()->
    getPhysicalPropertyLibrary<PhysicalChemicalLibrary>();
  
  const CFreal ovrho = 1./rho;

  /////////////////////////////////
  const CFreal eT = eData->dEdT; // check this !!!!
  // DevDTv is stored in PhysicalChemicalLibrary during linearization
  const CFreal evTv = eData->dEvTv;

  cf_assert(_model->getNbScalarVars(1) == 1);

  cf_assert(_ys.size() == nbSpecies);
  cf_assert(_alpha.size() == nbSpecies);
  
  library->setRiGas(_RiGas);//Think on commenting this.

  library->getMolarMasses(_mmasses);

  vector<CFuint> moleculeIDs;
  library->setMoleculesIDs(moleculeIDs);
  vector<bool> flag(nbSpecies, false);
  for (CFuint i = 0; i < moleculeIDs.size(); ++i) {
    flag[moleculeIDs[i]] = true;
  }
  
  for (CFuint i = 0; i < nbSpecies; ++i) {
    _fcoeff[i] = (flag[i]) ? 2.5 : 1.5;
  }
  /////////////////////////////////////////////////////////
  
  RealMatrix symmToCons(nbSpecies+4,nbSpecies+4);
  for (CFuint countRows=0;countRows<nbSpecies+4; ++countRows){
    for (CFuint countColumns=0;countColumns<nbSpecies+4; ++countColumns){
      symmToCons(countRows,countColumns)=0.0;
    }
  }

  for (CFuint is = 0; is < nbSpecies; ++is) {
    symmToCons(is,is) = -ova2;
    symmToCons(uID,is) = -ova2*u;
    symmToCons(vID,is) = -ova2*v;
    symmToCons(eID,is) = ova2*(phi*ev/beta-V2)+ova2*_alpha[is]/beta;//-ova2*(ev+V2)+ova2*_alpha[is]/beta;
    symmToCons(evID,is) = -ova2*ev;
  }
  
for (CFuint is = 0; is < nbSpecies; ++is) {
  symmToCons(is,eID) = ova*rho*_ys[is];
 }

  symmToCons(uID,uID) = rho;
  symmToCons(uID,vID) = 0.0;
  symmToCons(uID,eID) = rho*ova*u;
  symmToCons(uID,evID) = 0.0;
  
  symmToCons(vID,uID) = 0.0;
  symmToCons(vID,vID) = rho;
  symmToCons(vID,eID) = rho*ova*v;
  symmToCons(vID,evID) = 0.0;

  symmToCons(eID,uID)  = rho*u;
  symmToCons(eID,vID)  = rho*v;
  symmToCons(eID,eID)  = rho*ova*(H-phi*ev/beta);//ova*rho*(V2-2*phi*ev/beta)+rho*a/beta-ova*rho*sumAlphaYs/beta;
  symmToCons(eID,evID) = ova2*rho*phi/beta;
  
  symmToCons(evID,uID) = 0.0;
  symmToCons(evID,vID) = 0.0;
  symmToCons(evID,eID) = 2*rho*ev*ova;
  symmToCons(evID,evID) = -rho*ova2;//_transMatrix checked on 2009/4/2. Error in position (eID,eID) fixed.

   //Remove this:
  // 
  //cout << "SymmToCons: ";
  //cout << "dU/dQ = " << endl;
  //cout << symmToCons << endl;
   // //Checked: it enters here.
  //End of dU/dQ

  //Then define dQ/dU, conversely ConsToSymm:

  RealMatrix consToSymm(nbSpecies+4,nbSpecies+4);
  for (CFuint countRows=0;countRows<nbSpecies+4; ++countRows){
    for (CFuint countColumns=0;countColumns<nbSpecies+4; ++countColumns){
      consToSymm(countRows,countColumns)=0.0;
    }
  }
 
  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      //const CFreal minusA2Delta = (js != is) ? 0.0 : -a2;
	cout << endl << is <<" , "  << js << endl;
	
	consToSymm(is,js) = _ys[is]*_alpha[js];
	cout << consToSymm(is,js)<<endl;
	consToSymm(is,js)-=a2;//minusA2Delta includes the "-" sign, so we add it up.
		cout << consToSymm(is,js) <<endl;
      //if (is==js)
	//{
	  //consToSymm(is,js) = consToSymm(is,js)-a2;
	//}	
    }

    consToSymm(uID,is) = -ovrho*u;
    consToSymm(vID,is) = -ovrho*v;
    consToSymm(eID,is) = ovrho*ova*_alpha[is];
    consToSymm(evID,is) = ovrho*ev*(_alpha[is]+a2);
  }
  
    for (CFuint is = 0; is < nbSpecies; ++is) {
    consToSymm(is,uID) = -beta*_ys[is]*u;
    consToSymm(is,vID) = -beta*_ys[is]*v;
    consToSymm(is,eID) = beta*_ys[is];
    consToSymm(is,evID) = phi*_ys[is];//We are assuming phi=-beta, that is, no ionization of the plasma.
  }

  consToSymm(uID,uID) = ovrho;
  consToSymm(uID,vID) = 0.0;
  consToSymm(uID,eID) = 0.0;
  consToSymm(uID,evID) = 0.0;

  consToSymm(vID,uID) = 0.0;
  consToSymm(vID,vID) = ovrho;
  consToSymm(vID,eID) = 0.0;
  consToSymm(vID,evID) = 0.0;
  
  consToSymm(eID,uID) = -ovrho*ova*beta*u;
  consToSymm(eID,vID) = -ovrho*ova*beta*v;
  consToSymm(eID,eID)  = ovrho*ova*beta;
  consToSymm(eID,evID) = ovrho*ova*phi;
  
  consToSymm(evID,uID) = -ovrho*beta*ev*u;
  consToSymm(evID,vID) = -ovrho*beta*ev*v;
  consToSymm(evID,eID) = ovrho*beta*ev;      
  consToSymm(evID,evID) = ovrho*(phi*ev-a2);//consToSymm checked on 2009/3/30.
  //End of dQ/dU
   
  //
   //Remove this:
   //cout << "ConsToSymm dQ/dU = " << endl;
   //cout << consToSymm << endl;
   // //Checked: it enters here.

 //Define jacobU:
   RealMatrix jacobU;
   jacobU.resize(nbSpecies+4, nbSpecies+4);
   jacobU = 0.0;
   //cout<< jacobU<<endl;
  
   for (CFuint is = 0; is < nbSpecies; ++is) {
     for (CFuint js = 0; js < nbSpecies; ++js) {
       const CFreal delta = (js != is) ? 0.0 : 1.0; 
       jacobU(is,js) = (delta - _ys[is])*U;
     }
     jacobU(is,uID) = _ys[is]*nx;
     jacobU(is,vID) = _ys[is]*ny;
     jacobU(is,eID) = 0.0;
     jacobU(is,evID) = 0.0;
         
     jacobU(uID,is) = _alpha[is]*nx -U*u;
     jacobU(vID,is) = _alpha[is]*ny -U*v;
     jacobU(eID,is) = (_alpha[is] - H)*U;
     jacobU(evID,is) = -U*ev;
   }
  
   jacobU(uID,uID) = (1.-beta)*u*nx+U;
   jacobU(uID,vID) = u*ny-beta*v*nx;
   jacobU(uID,eID) = beta*nx;
   jacobU(uID,evID) = phi*nx;
  
   jacobU(vID,uID) = v*nx-beta*u*ny;
   jacobU(vID,vID) = (1.-beta)*v*ny+U;
   jacobU(vID,eID) = beta*ny;
   jacobU(vID,evID) = phi*ny;
  
   jacobU(eID,uID) = H*nx - beta*U*u;
   jacobU(eID,vID) = H*ny - beta*U*v;
   jacobU(eID,eID) = (1.+beta)*U;
   jacobU(eID,evID) = phi*U;
  
   jacobU(evID,uID) = ev*nx;
   jacobU(evID,vID) = ev*ny;
   jacobU(evID,eID) = 0.0;
   jacobU(evID,evID) = U;

   //End of jacobU

//Matrix: analyticConsToSymmtimesJacobU
   RealMatrix analyticConsToSymmtimesJacobU;
   
   analyticConsToSymmtimesJacobU.resize(nbSpecies+4, nbSpecies+4);
   analyticConsToSymmtimesJacobU = 0.0;
  
   for (CFuint is = 0; is < nbSpecies; ++is) {
     for (CFuint js = 0; js < nbSpecies; ++js) {
       const CFreal delta = (js != is) ? 0.0 : 1.0; 
       analyticConsToSymmtimesJacobU(is,js) = U*( _ys[is]*_alpha[js]-a2*delta);
     }
     analyticConsToSymmtimesJacobU(is,uID) = -beta*U*_ys[is]*u;
     analyticConsToSymmtimesJacobU(is,vID) = -beta*U*_ys[is]*v;
     analyticConsToSymmtimesJacobU(is,eID) = beta*U*_ys[is];
     analyticConsToSymmtimesJacobU(is,evID) = phi*U*_ys[is];
         
     analyticConsToSymmtimesJacobU(uID,is) = ovrho*(nx*_alpha[is]-U*u);
     analyticConsToSymmtimesJacobU(vID,is) = ovrho*(ny*_alpha[is]-U*v);
     analyticConsToSymmtimesJacobU(eID,is) = ovrho*U*(ova*_alpha[is] - a);
     analyticConsToSymmtimesJacobU(evID,is) = ovrho*U*ev*_alpha[is];
   }
  
   analyticConsToSymmtimesJacobU(uID,uID) = ovrho*(U-beta*nx*u);
   analyticConsToSymmtimesJacobU(uID,vID) = ovrho*(-beta*nx*v);
   analyticConsToSymmtimesJacobU(uID,eID) = ovrho*beta*nx;
   analyticConsToSymmtimesJacobU(uID,evID) = ovrho*phi*nx;
  
   analyticConsToSymmtimesJacobU(vID,uID) = ovrho*(-beta*ny*u);
   analyticConsToSymmtimesJacobU(vID,vID) = ovrho*(U-beta*ny*v);
   analyticConsToSymmtimesJacobU(vID,eID) = ovrho*beta*ny;
   analyticConsToSymmtimesJacobU(vID,evID) = ovrho*phi*ny;
  
   analyticConsToSymmtimesJacobU(eID,uID) = ovrho*(a*nx-ova*beta*U*u);
   analyticConsToSymmtimesJacobU(eID,vID) = ovrho*(a*ny-ova*beta*U*v);
   analyticConsToSymmtimesJacobU(eID,eID) = ovrho*ova*beta*U;
   analyticConsToSymmtimesJacobU(eID,evID) = ovrho*ova*phi*U;
  
   analyticConsToSymmtimesJacobU(evID,uID) = ovrho*ev*(a2*nx-beta*U*u);
   analyticConsToSymmtimesJacobU(evID,vID) = ovrho*ev*(a2*ny-beta*U*v);
   analyticConsToSymmtimesJacobU(evID,eID) = ovrho*beta*ev*U;
   analyticConsToSymmtimesJacobU(evID,evID) = ovrho*(phi*ev-a2)*U;

   //End of analyticConsToSymmtimesJacobU


   //RealMatrix m1(9,9);
   //RealMatrix m2(9,9);
  
   m1 = consToSymm*jacobU;
          cout << "consToSymm*jacobU = "<< endl;
          cout << m1 << endl <<endl;

	  cout << "analyticConsToSymmtimesJacobU = "<< endl;
          cout << analyticConsToSymmtimesJacobU << endl <<endl;

   	  RealMatrix difference =  m1 - analyticConsToSymmtimesJacobU;
	  cout << "consToSymm*jacobU- analyticConsToSymmtimesJacobU"<< difference << endl <<endl;

   m2 = m1*symmToCons;
   cout << "consToSymm*jacobU*symmToCons = "<< endl;
   cout << m2 << endl <<endl;
  
   cout << "jacobQ = "<< endl;
   cout << jacobQ << endl <<endl;
   
    difference = jacobQ-m2;

   cout <<"Difference" << difference << endl <<endl;
   //Using only symmToCons:
   m1=jacobU*symmToCons;
   m2=symmToCons*jacobQ;
   cout << "symmToCons*jacobQ = "<< endl;
   cout << m2 << endl <<endl;
  
   cout << "jacobU*symmToCons = "<< endl;
   cout << m1 << endl <<endl;
   difference = m1-m2;

   cout <<"Difference, using only symmToCons" <<endl;
   cout<< difference << endl <<endl;

  //Using only consToSymm:
   m1=consToSymm*jacobU;
   m2=jacobQ*consToSymm;
   cout << "jacobQ*consToSymm = "<< endl;
   cout << m2 << endl <<endl;
  
   cout << "consToSymm*jacobU = "<< endl;
   cout << m1 << endl <<endl;
   difference =m1-m2;

   cout <<"Difference, only using consToSymm" << endl;
   cout<< difference << endl <<endl;
   //
   cout <<" consToSymm*symmToCons" << endl;
   m1=consToSymm*symmToCons;
   cout<< m1 << endl <<endl;
   //
   cout <<"symmToCons*consToSymm" << endl;
   m2=symmToCons*consToSymm;
   cout<< m2 << endl <<endl;

  //End of debugging code.



  // compute the eigen values + and -
  if (_jacobDissip > 0.0) {
    // modified eigenvalues to cure carbuncle
    const CFreal j2 = _jacobDissip*_jacobDissip;
    for (CFuint iEq = 0; iEq < eValues.size(); ++iEq) {
      _eValuesP[iEq] = max(0.,eValues[iEq]);
      const CFreal evP = _eValuesP[iEq];
      _eValuesP[iEq] = 0.5*(evP + sqrt(evP*evP + j2*a2));
      
      _eValuesM[iEq] = min(0.,eValues[iEq]);
      const CFreal evM = _eValuesM[iEq];
      _eValuesM[iEq] = 0.5*(evM - sqrt(evM*evM + j2*a2));
    }
  }
  else {
    for (CFuint iEq = 0; iEq < eValues.size(); ++iEq) {
      _eValuesP[iEq] = max(0.,eValues[iEq]);
      _eValuesM[iEq] = min(0.,eValues[iEq]);
    }
  }
  
  // compute jacobian + and -
  jacobPlus = _rightEv*(_eValuesP*_leftEv);
  jacobMin  = _rightEv*(_eValuesM*_leftEv);
  

  //degugging infos
  CFLogDebugMax( "RightEigenvectors @Euler2DNEQSymm::splitJacobian" << "\n"
		 << _rightEv << "\n");
  CFLogDebugMax( "LeftEigenvectors @Euler2DNEQSymm::splitJacobian" << "\n"
		 << _leftEv << "\n");
  CFLogDebugMax( "EigenValues @Euler2DNEQSymm::splitJacobian" << "\n"
		 << eValues << "\n" << "\n"); 
  //
  cout<<"Aborting from method splitJacobian in the Object Euler2DNEQSymm."<<endl;
 abort();
  //Comment back, from here
  /*for (CFuint count=0;count<lData.size();count++){
    cout << endl<< count << " index => " << lData[count] << endl;
  }
  cout<<endl<<"Aborted from method splitJacobian"<<endl;
  abort();*/
  //to here

}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::computePhysicalData(State& state,
				     RealVector& data)
{
  const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  CFreal rho = 0.0;
  for (CFuint ie = 0; ie < nbSpecies; ++ie) {
    rho += state[ie];
  }
  
  data[EulerTerm::RHO] = rho;
  const CFreal ovRho = 1./rho;
  
  // set the species mass fractions
  const CFuint firstSpecies = getModel()->getFirstScalarVar(0);
  for (CFuint ie = 0; ie < nbSpecies; ++ie) {
    _ys[ie] = state[ie]*ovRho;
    data[firstSpecies + ie] = _ys[ie];
  }

  // U  and V Velocity Average
  data[EulerTerm::VX] = state[nbSpecies]*ovRho;
  data[EulerTerm::VY] = state[nbSpecies+1]*ovRho;
  
  const CFreal V2 = data[EulerTerm::VX]*data[EulerTerm::VX] +
    data[EulerTerm::VY]*data[EulerTerm::VY];
  data[EulerTerm::V] = sqrt(V2);
  
  const CFuint startTv = getModel()->getFirstScalarVar(1);
  data[startTv]= state[nbSpecies+3]*ovRho; //ev

  data[EulerTerm::E]  = state[nbSpecies+2]*ovRho;
  const CFreal Rgas = _library->getRgas();
  SafePtr<PhysicalChemicalLibrary::ExtraData> eData = _library->getExtraData();
  
  CFreal denom = 0.;
  CFreal form  = 0.;
  CFreal riovermi  = 0.;
  for (CFuint i = 0; i < nbSpecies; ++i) {
    riovermi += state[i]/_mmasses[i];// sumation of rhoI/molecularMassI
    const CFreal yOvM = _ys[i]/_mmasses[i];
    denom += yOvM*((Rgas*_fcoeff[i]));// this statement computes the averaged Cv both for translational and rotational energies.
    form += _ys[i]*eData->enthalpyForm[i];// this one is the mixture formation enthalpy.
  }

  data[EulerTerm::T] = (data[EulerTerm::E] - data[startTv] - form - 0.5*V2)/denom;

  const CFreal P = data[EulerTerm::T]*Rgas*riovermi;
  data[EulerTerm::P] = P;
  data[EulerTerm::H] = data[EulerTerm::E] + P*ovRho;
 
  //Speed of Sound  Average
  CFreal numBeta = 0.;
  CFreal denBeta = 0.;
  for (CFuint i = 0; i < nbSpecies; ++i) {
    const CFreal sigmai = _ys[i]/_mmasses[i];
    numBeta += sigmai;
    denBeta += sigmai*_fcoeff[i];
  }
  //Note: The definition of beta should NEVER include a contribution from the electrons (see in Gnoffo,Gupta,Shinn).

  const CFreal beta = numBeta/denBeta;
  const CFreal phi = -beta;//Ionization has not been considered for the moment.
  const CFreal q = 0.5*V2;
  const CFreal bq = beta*q;
  const CFreal RT = Rgas*data[EulerTerm::T];

  //From here:
  //Not being sure of this code portion, I've replaced this with another definion.
  //CFreal aiyi = 0.0;
  //for (CFuint i = 0; i < nbSpecies; ++i) {
  //aiyi += (_ys[i]/_mmasses[i])*(RT - beta*(_fcoeff[i]*RT + _mmasses[i]*eData->enthalpyForm[i]));
  //}
  //to here.

  CFreal sumAlphaYs = 0.0;

  for (CFuint is = 0; is < nbSpecies; ++is){
    _alpha[is] = _ys[is]*RT/_mmasses[is] + bq -beta*((eData->energyTr)[is])-phi*((eData->energyVib)[is]);//We've added here the contributions of the dynamic pressure and species vibrational energy!!!
    sumAlphaYs += _alpha[is]*_ys[is];
  }
  
  data[EulerTerm::A] = std::sqrt(sumAlphaYs+beta*(data[EulerTerm::H]-0.5*V2)+phi*data[startTv]); 
}
//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::computeStateFromPhysicalData(const RealVector& data,
					 State& state)
{
  throw Common::NotImplementedException (FromHere(),"Euler2DNEQSymm::computeStateFromPhysicalData()");
  
  //  state[0] = data[EulerTerm::RHO];
  //   state[1] = data[EulerTerm::RHO]*data[EulerTerm::VX];
  //   state[2] = data[EulerTerm::RHO]*data[EulerTerm::VY];
  //   state[3] = data[EulerTerm::RHO]*data[EulerTerm::E];
  
  //   // Set the species
  //   const CFuint firstSpecies = getModel()->getFirstScalarVar(0);
  //   const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  
  //   for (CFuint ie = 0; ie < nbSpecies; ++ie){
  //     state[4 + ie] = data[EulerTerm::RHO]*data[firstSpecies + ie];
  //   }
}

//////////////////////////////////////////////////////////////////////////////

CFreal Euler2DNEQSymm::getSpeed(const State& state) const
{
  const CFreal u = state[1]/state[0];
  const CFreal v = state[2]/state[0];
  return sqrt(u*u + v*v);
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::setDimensionalValues(const State& state,
                                          RealVector& result)
{
  throw Common::NotImplementedException
      (FromHere(), "Euler2DNEQSymm::setDimensionalValues()");
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::setAdimensionalValues(const Framework::State& state,
                             RealVector& result)
{
  throw Common::NotImplementedException
      (FromHere(), "Euler2DNEQSymm::setAdimensionalValues() not implemented");
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::setDimensionalValuesPlusExtraValues
(const State& state, RealVector& result,
 RealVector& extra)
{
  throw Common::NotImplementedException
    (FromHere(), "Euler2DNEQSymm::setDimensionalValuesPlusExtraValues()");
}
      
//////////////////////////////////////////////////////////////////////////////

vector<std::string> Euler2DNEQSymm::getExtraVarNames() const
{
  cf_assert(_library.isNotNull());

  vector<std::string> names(3);
  names[0] = "rho";
  names[1] = "H";
  names[2] = "M";

  return names;
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::setup()
{
  MultiScalarVarSet<Euler2DVarSet>::setup();
  
  const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  // set the equation set data for each of the equation subsets
  // first equation subset
  MultiScalarVarSet<Euler2DVarSet>::getEqSetData().resize(2);
  MultiScalarVarSet<Euler2DVarSet>::getEqSetData()[0].setup(0,0,nbSpecies);
  
  // second equation subset
  Euler2DVarSet::getEqSetData().resize(1);
  Euler2DVarSet::getEqSetData()[0].setup(1,nbSpecies,3);
  
  const CFuint nbTv = getModel()->getNbScalarVars(1);
  // third equation subset
  MultiScalarVarSet<Euler2DVarSet>::getEqSetData()[1].setup(2,nbSpecies + 3,nbTv);
  
  _library = PhysicalModelStack::getActive()->getImplementor()->
    getPhysicalPropertyLibrary<PhysicalChemicalLibrary>();
  cf_assert(_library.isNotNull());
  
  _Rgas = _library->getRgas();
  
  _dhe.resize(3 + nbTv);
  _ys.resize(nbSpecies);
  const CFuint totNbEqs = 3 + nbTv + nbSpecies;
   
  _rightEv.resize(totNbEqs, totNbEqs);
  _rightEv = 0.0;
  
  _leftEv.resize(totNbEqs, totNbEqs);
  _leftEv = 0.0;
  
  _alpha.resize(nbSpecies);
  _RiGas.resize(nbSpecies);
  _library->setRiGas(_RiGas);
  
  // needed for beta coefficient
  _mmasses.resize(nbSpecies);
  _library->getMolarMasses(_mmasses);
  
  _fcoeff.resize(nbSpecies);
  
  vector<CFuint> moleculeIDs;
  _library->setMoleculesIDs(moleculeIDs);
  vector<bool> flag(nbSpecies, false);
  for (CFuint i = 0; i < moleculeIDs.size(); ++i) {
    flag[moleculeIDs[i]] = true;
  }
  
  for (CFuint i = 0; i < nbSpecies; ++i) {
    _fcoeff[i] = (flag[i]) ? 2.5 : 1.5;
  }
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::computePerturbedStatesData
(const vector<State*>& states,
 const CFuint nbStatesInVec,
 const CFuint iVar)
{
  throw Common::NotImplementedException (FromHere(),"Euler2DNEQSymm::computePerturbedStatesData()");
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DNEQSymm::computeProjectedJacobian(const RealVector& normal, RealMatrix& jacob)
  {
  const CFuint nbSpecies = getModel()->getNbScalarVars(0);
  const CFuint nbTv = getModel()->getNbScalarVars(1);
  cf_assert(nbTv == 1);
  
  const RealVector& lData = getModel()->getPhysicalData();
  SafePtr<PhysicalChemicalLibrary::ExtraData> eData = _library->getExtraData();
  
  const CFreal T = lData[EulerTerm::T];
  const CFreal rho = lData[EulerTerm::RHO];
  const CFreal p = lData[EulerTerm::P];
  const CFreal cvTr = eData->dEdT;
  const CFreal beta = p/(rho*T)/cvTr;
  const CFreal phi = -beta;// This definition of phi does not account for gas ionization.
  const CFuint firstSpecies = getModel()->getFirstScalarVar(0);
  CFreal sumAlphaYs = 0.0;
  
  cf_assert(_ys.size() == nbSpecies); 
  cf_assert(_alpha.size() == nbSpecies);
  
  if (p <= 0) {
    cout << "_ys = " << _ys << endl;
    cout << "rho = " << rho << endl;
    cout << "T   = " << T << endl;
    cout << "p   = " << p << endl;
    cout << "cvTr= " << cvTr << endl << endl;
    cf_assert(p > 0.0);
  }
  
  cf_assert(T > 0.0);
  cf_assert(rho > 0.0);
  
  const CFreal nx = normal[XX];
  const CFreal ny = normal[YY];
  const CFreal u = lData[EulerTerm::VX];
  const CFreal v = lData[EulerTerm::VY];
  const CFreal V2 = lData[EulerTerm::V]*lData[EulerTerm::V];
  const CFreal q = 0.5*V2;
  const CFreal V = v*nx -u*ny;
  const CFreal H = lData[EulerTerm::H];
  const CFuint firstTv = getModel()->getFirstScalarVar(1);
  const CFreal ev = lData[firstTv];
  const CFreal a2 = (1. + beta)*p/rho;

  const CFreal a = sqrt(a2);//JGM's addition.

  const CFreal U = u*nx + v*ny;
  const CFuint nbSpPlus1 = nbSpecies+1; 
  const CFuint nbSpPlus2 = nbSpecies+2; 
  const CFuint nbSpPlus3 = nbSpecies+3;
  ////////////////////////
  const CFuint uID  = nbSpecies;
  const CFuint vID  = nbSpecies+1;
  const CFuint eID  = nbSpecies+2;
  const CFuint evID = nbSpecies+3;
  ///////////////////////
  const CFreal bq = beta*q;

  for (CFuint is = 0; is < nbSpecies; ++is) {
    _ys[is] = lData[firstSpecies + is];
    cf_assert(_ys[is] < 1.1);
    
    _alpha[is] = _RiGas[is]*T + bq - beta*((eData->energyTr)[is])-phi*((eData->energyVib)[is]); //We've added here the contributions of the dynamic pressure and species vibrational energy!!!//_alpha[is] = _RiGas[is]*T - beta*(eData->energyTr)[is];
    sumAlphaYs += _alpha[is]*_ys[is];
  }
  


  for (CFuint is = 0; is < nbSpecies; ++is) {
    for (CFuint js = 0; js < nbSpecies; ++js) {
      const CFreal Udelta = (js != is) ? 0.0 : U; 
      jacob(is,js) = Udelta;
    }
    jacob(is,uID) = 0.0;
    jacob(is,vID) = 0.0;
    jacob(is,eID) = 0.0;
    jacob(is,evID) = 0.0;
    
    jacob(uID,is) = 0.0;
    jacob(vID,is) = 0.0;
    jacob(eID,is) = 0.0;
    jacob(evID,is) = 0.0;
  }
  
  jacob(uID,uID) = U;
  jacob(uID,vID) = 0.0;
  jacob(uID,eID) = a*nx;
  jacob(uID,evID) = 0.0;
  
  jacob(vID,uID) = 0.0;
  jacob(vID,vID) = U;
  jacob(vID,eID) = a*ny;
  jacob(vID,evID) = 0.0;
  
  jacob(eID,uID) = a*nx;
  jacob(eID,vID) = a*ny;
  jacob(eID,eID) = U;
  jacob(eID,evID) = 0.0;
  
  jacob(evID,uID) = ev*a2*nx;
  jacob(evID,vID) = ev*a2*ny;
  jacob(evID,eID) = 0.0;
  jacob(evID,evID) = U;//jacob checked on 2009/4/23.
}


//////////////////////////////////////////////////////////////////////////////

    } // end of namespace NEQ

  } // end of namespace Physics

} // end of namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
