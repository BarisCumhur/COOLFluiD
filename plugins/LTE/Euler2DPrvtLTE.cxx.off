#include "LTE.hh"
#include "Euler2DPrvtLTE.hh"
#include "Utils/NotImplementedException.hh"
#include "Environment/ObjectProvider.hh"
#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/EigenSolver.hh"

//////////////////////////////////////////////////////////////////////////////

using namespace std;
using namespace COOLFluiD::Framework;
using namespace COOLFluiD::Utils;
using namespace COOLFluiD::MathTools;
using namespace COOLFluiD::Physics::NavierStokes;

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace LTE {

//////////////////////////////////////////////////////////////////////////////

Environment::ObjectProvider<Euler2DPrvtLTE, ConvectiveVarSet, LTEModule, 1>
euler2DPrvtLTEProvider("Euler2DPrvtLTE");

//////////////////////////////////////////////////////////////////////////////

Euler2DPrvtLTE::Euler2DPrvtLTE(Utils::SafePtr<BaseTerm> term) :
  Euler2DVarSet(term),
  _library(CFNULL),
  _dhe(3),
  _x(),
  _tol(10e-4),
  _eigenSolver(),
  _jmatrix(4,4),
  _rightEv(4,4),
  _leftEv(4,4)
{
  vector<CFString> names(4);
  names[0] = "p";
  names[1] = "rhoU";
  names[2] = "rhoV";
  names[3] = "T";
  setVarNames(names);
}

//////////////////////////////////////////////////////////////////////////////

Euler2DPrvtLTE::~Euler2DPrvtLTE()
{
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setJacobians()
{
  throw Utils::NotImplementedException("Euler2DPrvtLTE::setJacobians()");
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setEigenValuesVectors(RealMatrix& rightEv,
                                           RealMatrix& leftEv,
                                           RealVector& eValues,
                                           const RealVector& normal)
{
  const RealVector& refData = *getModel()->getReferencePhysicalData();
  const RealVector& linearData = *getModel()->getPhysicalData();

  // set reference density and internal energy
  const CFreal p = linearData[EulerTerm::P];
  const CFreal T = linearData[EulerTerm::T];
  CFreal pdim = p*refData[EulerTerm::P];
  CFreal Tdim = T*getModel()->getTempRef();
  const CFreal rho = linearData[EulerTerm::RHO];
  const CFreal V2 = linearData[EulerTerm::V]*linearData[EulerTerm::V];
  const CFreal e = linearData[EulerTerm::E] - 0.5*V2;
  const CFreal h = linearData[EulerTerm::H] - 0.5*V2;

  // perturb the pressure and compute derivatives for rho and e
  const CFreal dp = _tol*p;
  const CFreal p1 = p + dp;
  pdim = p1*refData[EulerTerm::P]; // Tdim unchanges so far, set new pdim
  // this additional call to set the composition is useless
  // (result is the same even without and run-time speed a bit better)
  _library->setComposition(Tdim, pdim);
  CFreal rho1 = _library->density(Tdim,pdim)/refData[EulerTerm::RHO];
  CFreal e1 = _library->energy(Tdim,pdim)/refData[EulerTerm::H];
  CFreal h1 = _library->enthalpy(Tdim,pdim)/refData[EulerTerm::H];
  const CFreal drdp = (rho1 - rho)/dp;
  const CFreal dedp = (e1 - e)/dp;
  const CFreal dhdp = (h1 - h)/dp;

  pdim = p*refData[EulerTerm::P]; // restore original pdim
  // perturb the temperature and compute derivatives for rho and e
  const CFreal dT = _tol*T;
  const CFreal T1 = T + dT;
  Tdim = T1*getModel()->getTempRef(); // set new Tdim
  // this additional call to set the composition is useless
  // (result is the same even without and run-time speed a bit better)
  _library->setComposition(Tdim, pdim);
  rho1 = _library->density(Tdim,pdim)/refData[EulerTerm::RHO];
  e1 = _library->energy(Tdim,pdim)/refData[EulerTerm::H];
  h1 = _library->enthalpy(Tdim,pdim)/refData[EulerTerm::H];
  const CFreal drdT = (rho1 - rho)/dT;
  const CFreal dedT = (e1 - e)/dT;
  const CFreal dhdT = (h1 - h)/dp;

  // various coefficients
  const CFreal d = rho*(dedT*drdp - dedp*drdT);
  const CFreal Dt = drdT/d;
  const CFreal Dp = drdp/d;
  const CFreal u = linearData[EulerTerm::VX];
  const CFreal v = linearData[EulerTerm::VY];
  const CFreal nx = normal[XX];
  const CFreal ny = normal[YY];
  const CFreal vn = u*nx + v*ny;
  const CFreal kT = (drdT*(e - h) + rho*dedT)/d;
  const CFreal kp = (drdp*(e - h) + rho*dedp)/d;
  const CFreal Dtvn = Dt*vn;
  const CFreal Dpvn = Dp*vn;
  const CFreal rpvn = drdp*vn;
  const CFreal rtvn = drdT*vn;

  _jmatrix(0,0) = Dtvn*(1.0 - rho*dhdp);
  _jmatrix(0,1) = nx*kT;
  _jmatrix(0,2) = ny*kT;
  _jmatrix(0,3) = -Dtvn*rho*dhdT;

  _jmatrix(1,0) = nx - u*rpvn;
  _jmatrix(1,1) = u*nx + vn;
  _jmatrix(1,2) = u*ny;
  _jmatrix(1,3) = -u*rtvn;

  _jmatrix(2,0) = ny - v*rpvn;
  _jmatrix(2,1) = v*nx;
  _jmatrix(2,2) = v*ny + vn;
  _jmatrix(2,3) = -v*rtvn;;

  _jmatrix(3,0) = -Dpvn*(1.0 - rho*dhdp);
  _jmatrix(3,1) = -nx*kp;
  _jmatrix(3,2) = -ny*kp;
  _jmatrix(3,3) = Dpvn*rho*dhdT;

  //   // various coefficients
  //   const CFreal a = drdp*(e - 0.5*V2) + rho*dedp;
  //   const CFreal b = drdT*(e - 0.5*V2) + rho*dedT;
  //   const CFreal d = rho*(dedT*drdp - dedp*drdT);
  //   const CFreal Dt = drdT/d;
  //   const CFreal Dp = drdp/d;
  //   const CFreal u = linearData.avVel[XX];
  //   const CFreal v = linearData.avVel[YY];
  //   const CFreal nx = normal[XX];
  //   const CFreal ny = normal[YY];
  //   const CFreal vn = u*nx + v*ny;
  //   const CFreal kp = 1.0 - drdp*V2 + rho*(dhdp -V2*drdp);
  //   const CFreal kT = 1.0 - drdT*V2 + rho*(dhdT -V2*drdT);
  //   const CFreal bb = b/d +Dt*V2 - Dt*linearData.avH;
  //   const CFreal aa = -a/d - Dp*V2 + Dp*linearData.avH;
  //   const CFreal Dtvn = Dt*vn;
  //   const CFreal Dpvn = Dp*vn;
  //   const CFreal Dtr = Dtvn*(1.0 - rho);
  //   const CFreal Dpr = Dpvn*(1.0 - rho);
  //   const CFreal rpvn = drdp*vn;
  //   const CFreal rtvn = drdT*vn;

  //   _jmatrix(0,0) = Dtvn*kp;
  //   _jmatrix(0,1) = bb*nx + Dtr*u;
  //   _jmatrix(0,2) = bb*ny + Dtr*v;
  //   _jmatrix(0,3) = Dtvn*kT;

  //   _jmatrix(1,0) = nx - u*rpvn;
  //   _jmatrix(1,1) = u*nx + vn;
  //   _jmatrix(1,2) = u*ny;
  //   _jmatrix(1,3) = nx - u*rtvn;

  //   _jmatrix(2,0) = ny - v*rpvn;
  //   _jmatrix(2,1) = v*nx;
  //   _jmatrix(2,2) = v*ny + vn;
  //   _jmatrix(2,3) = ny - v*rtvn;;

  //   _jmatrix(3,0) = -Dpvn*kp;
  //   _jmatrix(3,1) = aa*nx - Dpr*u;
  //   _jmatrix(3,2) = aa*ny - Dpr*v;
  //   _jmatrix(3,3) = -Dpvn*kT;

  //call eigensolver (e.g. clapack) here
  _eigenSolver->eigValuesVectorsRealNonSymm(_jmatrix,
					    eValues,
					    rightEv);

  // compute the matrix of left eigenvectors by inversion
  rightEv.invert4(leftEv);
}

//////////////////////////////////////////////////////////////////////////////

CFuint Euler2DPrvtLTE::getBlockSeparator() const
{
  return 4;
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::splitJacob(RealMatrix& jacobPlus,
                                RealMatrix& jacobMin,
                                RealVector& eValues,
                                const RealVector& normal)
{
  const RealVector& refData = *getModel()->getReferencePhysicalData();
  const RealVector& linearData = *getModel()->getPhysicalData();

  // set reference density and internal energy
  const CFreal p = linearData[EulerTerm::P];
  const CFreal T = linearData[EulerTerm::T];
  CFreal pdim = p*refData[EulerTerm::P];
  CFreal Tdim = T*getModel()->getTempRef();
  const CFreal rho = linearData[EulerTerm::RHO];
  const CFreal V2 = linearData[EulerTerm::V]*linearData[EulerTerm::V];
  const CFreal e = linearData[EulerTerm::E] - 0.5*V2;
  const CFreal h = linearData[EulerTerm::H] - 0.5*V2;

  // perturb the pressure and compute derivatives for rho and e
  const CFreal dp = _tol*p;
  const CFreal p1 = p + dp;
  pdim = p1*refData[EulerTerm::P]; // Tdim unchanges so far, set new pdim
  _library->setComposition(Tdim, pdim);
  CFreal rho1 = _library->density(Tdim,pdim)/refData[EulerTerm::RHO];
  CFreal e1 = _library->energy(Tdim,pdim)/refData[EulerTerm::H];
  CFreal h1 = _library->enthalpy(Tdim,pdim)/refData[EulerTerm::H];
  const CFreal drdp = (rho1 - rho)/dp;
  const CFreal dedp = (e1 - e)/dp;
  const CFreal dhdp = (h1 - h)/dp;

  pdim = p*refData[EulerTerm::P]; // restore original pdim
  // perturb the temperature and compute derivatives for rho and e
  const CFreal dT = _tol*T;
  const CFreal T1 = T + dT;
  Tdim = T1*getModel()->getTempRef(); // set new Tdim
  _library->setComposition(Tdim, pdim);
  rho1 = _library->density(Tdim,pdim)/refData[EulerTerm::RHO];
  e1 = _library->energy(Tdim,pdim)/refData[EulerTerm::H];
  h1 = _library->enthalpy(Tdim,pdim)/refData[EulerTerm::H];
  const CFreal drdT = (rho1 - rho)/dT;
  const CFreal dedT = (e1 - e)/dT;
  const CFreal dhdT = (h1 - h)/dp;

  // various coefficients
  const CFreal d = rho*(dedT*drdp - dedp*drdT);
  const CFreal Dt = drdT/d;
  const CFreal Dp = drdp/d;
  const CFreal u = linearData[EulerTerm::VX];
  const CFreal v = linearData[EulerTerm::VY];
  const CFreal nx = normal[XX];
  const CFreal ny = normal[YY];
  const CFreal vn = u*nx + v*ny;
  const CFreal kT = (drdT*(e - h) + rho*dedT)/d;
  const CFreal kp = (drdp*(e - h) + rho*dedp)/d;
  const CFreal Dtvn = Dt*vn;
  const CFreal Dpvn = Dp*vn;
  const CFreal rpvn = drdp*vn;
  const CFreal rtvn = drdT*vn;

  _jmatrix(0,0) = Dtvn*(1.0 - rho*dhdp);
  _jmatrix(0,1) = nx*kT;
  _jmatrix(0,2) = ny*kT;
  _jmatrix(0,3) = -Dtvn*rho*dhdT;

  _jmatrix(1,0) = nx - u*rpvn;
  _jmatrix(1,1) = u*nx + vn;
  _jmatrix(1,2) = u*ny;
  _jmatrix(1,3) = -u*rtvn;

  _jmatrix(2,0) = ny - v*rpvn;
  _jmatrix(2,1) = v*nx;
  _jmatrix(2,2) = v*ny + vn;
  _jmatrix(2,3) = -v*rtvn;;

  _jmatrix(3,0) = -Dpvn*(1.0 - rho*dhdp);
  _jmatrix(3,1) = -nx*kp;
  _jmatrix(3,2) = -ny*kp;
  _jmatrix(3,3) = Dpvn*rho*dhdT;

  //   const CFreal a = drdp*(e - 0.5*V2) + rho*dedp;
//   const CFreal b = drdT*(e - 0.5*V2) + rho*dedT;
//   const CFreal d = rho*(dedT*drdp - dedp*drdT);
//   const CFreal Dt = drdT/d;
//   const CFreal Dp = drdp/d;
//   const CFreal u = linearData.avVel[XX];
//   const CFreal v = linearData.avVel[YY];
//   const CFreal nx = normal[XX];
//   const CFreal ny = normal[YY];
//   const CFreal vn = u*nx + v*ny;
//   const CFreal kp = 1.0 - drdp*V2 + rho*(dhdp -V2*drdp);
//   const CFreal kT = 1.0 - drdT*V2 + rho*(dhdT -V2*drdT);
//   const CFreal bb = b/d +Dt*V2 - Dt*linearData.avH;
//   const CFreal aa = -a/d - Dp*V2 + Dp*linearData.avH;
//   const CFreal Dtvn = Dt*vn;
//   const CFreal Dpvn = Dp*vn;
//   const CFreal Dtr = Dtvn*(1.0 - rho);
//   const CFreal Dpr = Dpvn*(1.0 - rho);
//   const CFreal rpvn = drdp*vn;
//   const CFreal rtvn = drdT*vn;

//   _jmatrix(0,0) = Dtvn*kp;
//   _jmatrix(0,1) = bb*nx + Dtr*u;
//   _jmatrix(0,2) = bb*ny + Dtr*v;
//   _jmatrix(0,3) = Dtvn*kT;

//   _jmatrix(1,0) = nx - u*rpvn;
//   _jmatrix(1,1) = u*nx + vn;
//   _jmatrix(1,2) = u*ny;
//   _jmatrix(1,3) = nx - u*rtvn;

//   _jmatrix(2,0) = ny - v*rpvn;
//   _jmatrix(2,1) = v*nx;
//   _jmatrix(2,2) = v*ny + vn;
//   _jmatrix(2,3) = ny - v*rtvn;;

//   _jmatrix(3,0) = -Dpvn*kp;
//   _jmatrix(3,1) = aa*nx - Dpr*u;
//   _jmatrix(3,2) = aa*ny - Dpr*v;
//   _jmatrix(3,3) = -Dpvn*kT;

  //call eigensolver (e.g. clapack) here
  _eigenSolver->eigValuesVectorsRealNonSymm(_jmatrix,
					    eValues,
					    _rightEv);

  // compute the matrix of left eigenvectors by inversion
  _rightEv.invert4(_leftEv);

  // cout << "rightEv = " << endl;
  // cout << _rightEv << endl;
  // cout << "leftEv = " << endl;
  // cout << _leftEv << endl;

  // compute the eigen values + and -
  for (CFuint iEq = 0; iEq < 4; ++iEq) {
    _eValuesP[iEq] = max(0.,eValues[iEq]);
    _eValuesM[iEq] = min(0.,eValues[iEq]);
  }

  // compute jacobian + and -
  jacobPlus = _rightEv*(_eValuesP*_leftEv);
  jacobMin  = _rightEv*(_eValuesM*_leftEv);
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setPhysicalData(State& state,
					 RealVector& data)
{
  CFreal p = state[0];
  CFreal T = state[3];

  const RealVector& refData = *getModel()->getReferencePhysicalData();

  CFreal pdim = p*refData[EulerTerm::P];
  CFreal Tdim = T*getModel()->getTempRef();

  // set the composition
  _library->setComposition(Tdim,pdim);
  _library->setDensityEnthalpyEnergy(Tdim, pdim,_dhe);

  CFreal rhoDim = _dhe[0];
  CFreal gamma = 0.0;
  CFreal adim = 0.0;
  _library->gammaAndSoundSpeed(Tdim,pdim,rhoDim,gamma,adim);

  data[EulerTerm::RHO] = rhoDim/refData[EulerTerm::RHO];

  const CFreal u = state[1]/data[EulerTerm::RHO];
  const CFreal v = state[2]/data[EulerTerm::RHO];
  const CFreal V2 = u*u + v*v;
  data[EulerTerm::V] = sqrt(V2);
  data[EulerTerm::VX] = u;
  data[EulerTerm::VY] = v;
  data[EulerTerm::P] = p;
  data[EulerTerm::H] = _dhe[1]/refData[EulerTerm::H] + 0.5*V2;
  data[EulerTerm::E] = _dhe[2]/refData[EulerTerm::H] + 0.5*V2;
  data[EulerTerm::A] = adim/refData[EulerTerm::A];
  data[EulerTerm::T] = T;
  data[EulerTerm::GAMMA] = gamma;
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setFromPhysicalData(const RealVector& data,
					     State& state)
{
  throw Utils::NotImplementedException("Euler2DPrvtLTE::setFromPhysicalData()");
}

//////////////////////////////////////////////////////////////////////////////

CFreal Euler2DPrvtLTE::getSpeed(const State& state) const
{
  throw Utils::NotImplementedException("Euler2DPrvtLTE::getSpeed()");
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setDimensionalValues(const State& state,
                                          RealVector& result)
{
  const RealVector& refData = *getModel()->getReferencePhysicalData();

  result[0] = state[0]*refData[EulerTerm::P];
  result[1] = state[1]*refData[EulerTerm::V]*refData[EulerTerm::RHO];
  result[2] = state[2]*refData[EulerTerm::V]*refData[EulerTerm::RHO];
  result[3] = state[3]*getModel()->getTempRef();
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setAdimensionalValues(const State& state,
                                          RealVector& result)
{
  const RealVector& refData = *getModel()->getReferencePhysicalData();

  result[0] = state[0]/refData[EulerTerm::P];
  result[1] = state[1]/(refData[EulerTerm::V]*refData[EulerTerm::RHO]);
  result[2] = state[2]/(refData[EulerTerm::V]*refData[EulerTerm::RHO]);
  result[3] = state[3]/getModel()->getTempRef();
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setDimensionalValuesPlusExtraValues
(const State& state, RealVector& result,
 RealVector& extra)
{
  const RealVector& refData = *getModel()->getReferencePhysicalData();

  const CFreal rhou = state[1]*refData[EulerTerm::V]*refData[EulerTerm::RHO];
  const CFreal rhov = state[2]*refData[EulerTerm::V]*refData[EulerTerm::RHO];
  CFreal p = state[0]*refData[EulerTerm::P];
  CFreal T = state[3]*getModel()->getTempRef();

  result[0] = p;
  result[1] = rhou;
  result[2] = rhov;
  result[3] = T;

  const CFuint nbSpecies = _library->getNbSpecies();
  // density, total enthalpy, Mach, Xi*nbSpecies
  extra.resize(3 + nbSpecies);

  _x.resize(_library->getNbSpecies());

  // set the composition
  _library->setComposition(T,p,_x);

  const CFreal rho = _library->density(T,p);
  const CFreal V2 = (rhou*rhou + rhov*rhov)/(rho*rho);
  extra[0] = rho;
  extra[1] = _library->enthalpy(T,p) + 0.5*V2;
  extra[2] = sqrt(V2)/_library->soundSpeed(T,p,extra[0]);
  for (CFuint is = 0; is < nbSpecies; ++is) {
    extra[3 + is] = _x[is];
  }
}

//////////////////////////////////////////////////////////////////////////////

vector<CFString> Euler2DPrvtLTE::getExtraVarNames() const
{
  assert(_library.isNotNull());
  const CFuint nbSpecies = _library->getNbSpecies();

  vector<CFString> names(3 + nbSpecies);
  names[0] = "rho";
  names[1] = "H";
  names[2] = "M";

  for (CFuint is = 0; is < nbSpecies; ++is) {
    names[3 + is] = "xc" + CFString::convertToCFString(is);;
  }

  return names;
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::setup()
{
  //  fluct split has to call setup()
  Euler2DVarSet::setup();

  _library = PhysicalModelStack::getActive()->getImplementor()->
    getPhysicalPropertyLibrary<PhysicalChemicalLibrary>();
  assert(_library.isNotNull());

  _eigenSolver = Environment::Factory<EigenSolver>::getInstance().getProvider("CLAPACK")->
    create(4);
}

//////////////////////////////////////////////////////////////////////////////

void Euler2DPrvtLTE::computePerturbedStatesData
(const vector<State*>& states,
 const CFuint nbStatesInVec,
 const CFuint iVar)
{
  assert(iVar < 4);

  if (iVar == 0 || iVar == 3) { // p + dp // T + dT
    for (CFuint i = 0; i < nbStatesInVec; ++i) {
      State *const currState = states[i];
      RealVector& data = *getModel()->findData(currState);
      setPhysicalData(*currState, data);
    }
  }
  else { // u + du // v + dv
    for (CFuint i = 0; i < nbStatesInVec; ++i) {
      State *const currState = states[i];
      RealVector& data = *getModel()->findData(currState);
      const RealVector& bData = *getModel()->findBackUpData(currState);
      const CFreal u = (*currState)[1]/bData[EulerTerm::RHO];
      const CFreal v = (*currState)[2]/bData[EulerTerm::RHO];
      const CFreal V2 = u*u + v*v;
      const CFreal k = 0.5*(V2 - bData[EulerTerm::V]*bData[EulerTerm::V]);

      data[EulerTerm::VX] = u;
      data[EulerTerm::VY] = v;
      data[EulerTerm::RHO] = bData[EulerTerm::RHO];
      data[EulerTerm::V] = sqrt(V2);
      data[EulerTerm::P] = bData[EulerTerm::P];
      data[EulerTerm::T] = bData[EulerTerm::T];
      data[EulerTerm::H] = bData[EulerTerm::H] + k;
      data[EulerTerm::A] = bData[EulerTerm::A];
      data[EulerTerm::E] = bData[EulerTerm::E] + k;
    }
  }
}

//////////////////////////////////////////////////////////////////////////////

} // end of namespace LTE

  } // end of namespace Physics

} // end of namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
