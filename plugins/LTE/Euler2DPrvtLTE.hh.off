#ifndef COOLFluiD_Physics_LTE_Euler2DPrvtLTE_hh
#define COOLFluiD_Physics_LTE_Euler2DPrvtLTE_hh

//////////////////////////////////////////////////////////////////////////////

#include "NavierStokes/Euler2DVarSet.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Framework {
    class EigenSolver;
    class PhysicalChemicalLibrary;
  }

  namespace Physics {
    
    namespace LTE {

//////////////////////////////////////////////////////////////////////////////

  /**
   * This class represents a Euler physical model 2D for primitive
   * variables
   *
   * @author Andrea Lani
   */
class Euler2DPrvtLTE : public NavierStokes::Euler2DVarSet {
public: // classes

  /**
   * Constructor
   * @see Euler2D
   */
  Euler2DPrvtLTE(Utils::SafePtr<Framework::BaseTerm> term);

  /**
   * Default destructor
   */
  ~Euler2DPrvtLTE();

  /**
   * Set up the private data and give the maximum size of states physical
   * data to store
   */
  void setup();

  /**
   * Get extra variable names
   */
  std::vector<CFString> getExtraVarNames() const;

  /**
   * Gets the block separator for this variable set
   */
  CFuint getBlockSeparator() const;

  /**
   * Set the jacobians
   */
  void setJacobians();

  /**
   * Split the jacobian
   */
  void splitJacob(RealMatrix& jacobPlus,
      RealMatrix& jacobMin,
      RealVector& eValues,
      const RealVector& normal);
  /**
   * Set the matrix of the right eigenvectors and the matrix of the eigenvalues
   */
  void setEigenValuesVectors(RealMatrix& rightEv,
           RealMatrix& leftEv,
           RealVector& eValues,
           const RealVector& normal);

  /**
   * Get the speed
   */
  CFreal getSpeed(const Framework::State& state) const;

  /**
   * Give dimensional values to the adimensional state variables
   */
  void setDimensionalValues(const Framework::State& state,
                            RealVector& result);

  /**
   * Give adimensional values to the dimensional state variables
   */
  void setAdimensionalValues(const Framework::State& state,
                             RealVector& result);

  /**
   * Set other adimensional values for useful physical quantities
   */
  void setDimensionalValuesPlusExtraValues
  (const Framework::State& state, RealVector& result,
   RealVector& extra);

  /**
   * Compute the perturbed states data
   */
  void computePerturbedStatesData
  (const std::vector<Framework::State*>& states,
   const CFuint nbStatesInVec,
   const CFuint iVar);

  /**
   * Set the PhysicalData corresponding to the given State
   * @see EulerPhysicalModel
   */
  void setPhysicalData(Framework::State& state,
			   RealVector& data);
  
  /**
   * Set a State starting from the given PhysicalData
   * @see EulerPhysicalModel
   */
  void setFromPhysicalData(const RealVector& data,
			       Framework::State& state);

private:
  
  /// thermodynamic library
  Utils::SafePtr<Framework::PhysicalChemicalLibrary> _library;

  /// array to store density, enthalpy and energy
  RealVector _dhe;

  /// array to store the volume composition for each species
  RealVector _x;

  /// tolerance for numerical derivative
  CFreal _tol;

  /// eigensolver
  Utils::SelfRegistPtr<Framework::EigenSolver> _eigenSolver;

  /// temporary jacobian matrix
  RealMatrix _jmatrix;

  /// temporary matrix of right eigenvalues
  RealMatrix                       _rightEv;

  /// temporary matrix of left eigenvalues
  RealMatrix                       _leftEv;

}; // end of class Euler2DPrvt

//////////////////////////////////////////////////////////////////////////////

    } // end of namespace LTE

  } // end of namespace Physics

} // end of namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

#endif // COOLFluiD_Physics_LTE_Euler2DPrvtLTE_hh
