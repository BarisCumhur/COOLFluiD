#include "FiniteVolumeNEQ/FiniteVolumeNEQ.hh"
#include "FiniteVolumeNEQ/NoSlipWallIsothermalNSrvtCatT.hh"
#include "Framework/MethodCommandProvider.hh"
#include "Framework/PhysicalChemicalLibrary.hh"
#include "MathTools/MatrixInverter.hh"
#include <cmath>

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::defineConfigOptions(Config::OptionList& options)
{
  options.addConfigOption< CFreal > ("Epsilon","Epsilon for numerical derivatives."); 
  options.addConfigOption< CFuint > ("Nr","Number of catalised equations at the wall");
  options.addConfigOption< CFuint > ("NewtonLoop","Number of Newton loop that we want to do"); 
  options.addConfigOption< std::vector<std::string> >
    ("Vars","Definition of the Variables.");
  options.addConfigOption< std::vector<std::string> >
    ("GammaN_O","Definition of the effective catalytic recombination factor for N and O");
  options.addConfigOption< bool > ("OldVersion","Nadege's Villedieu original implementation");
}
      
//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
NoSlipWallIsothermalNSrvtCatT<MODEL>::NoSlipWallIsothermalNSrvtCatT(const std::string& name) :
  NoSlipWallIsothermalNSrvt<MODEL>(name),
  m_inverter(CFNULL),
  m_vFunction(), // m_condition(),
  m_rhob(0.), m_rhoi(0.), m_gammaN(0.), m_gammaO(0.),
  m_yi(), m_xi(), m_yb(), m_yw(), m_yp(), m_yg(),  m_xb(), m_xw(), m_xp(), m_mm(), 
  m_dx(), m_dxp(), m_omega(), m_omegap(), m_Diff_flux(), m_Diff_fluxp(), 
  m_b(), m_zero(), m_mcal(), m_partrho(), m_rhoG(), m_gammaV(), m_proj(), 
  m_Dbin(), m_nu(), m_muN(), m_muO(),  m_muN2(),  m_muNO(),   m_muO2(),  m_a(), m_inva()
{
  this->addConfigOptionsTo(this);
  
  m_nr = 0;
  this->setParameter("Nr",&m_nr);
   
  m_nl = 2;
  this->setParameter("NewtonLoop",&m_nl);
  
  m_eps = 1e-7;
  this->setParameter("Epsilon",&m_eps);
  
  m_functions = std::vector<std::string>();
  this->setParameter("GammaN_O",&m_functions);
  
  m_vars = std::vector<std::string>();
  this->setParameter("Vars",&m_vars);
  
  m_oldVersion = true;
  this->setParameter("OldVersion",&m_oldVersion);
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
NoSlipWallIsothermalNSrvtCatT<MODEL>::~NoSlipWallIsothermalNSrvtCatT()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::setGhostStateImpl
(const Framework::State& innerState,  Framework::State& ghostState)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::MathTools;
  
  if (this->m_adiabatic || this->getMethodData().getNodalStatesExtrapolator()->runAdiabatic()) {
    this->imposeAdiabatic(innerState, ghostState);
  }
  else {
    // this static int stores the first iteration number at which the code enters here
    static CFuint startIter = SubSystemStatusStack::getActive()->getNbIter();
    
    cf_assert(this->m_wallTemp > 0.); 
    const CFreal Tghost = 2.*this->m_wallTemp - innerState[this->m_tempID];
    
    CFuint iTemp = this->m_tempID;
    for (CFuint i = 0; i < this->m_innerTTvib.size(); ++i, ++iTemp) {
      cf_assert(iTemp < innerState.size()); 
      cf_assert(iTemp < ghostState.size());
      this->m_innerTTvib[i] = innerState[iTemp];
      this->m_ghostTTvib[i] = ghostState[iTemp];
    }
    
    if (!m_oldVersion) {
      this->repositionNode(this->m_innerTTvib, this->m_ghostTTvib, this->m_wallTemp, this->m_ghostTempMin);
      
      // reset the ghost node with the new position
      ghostState.getCoordinates() = this->m_tempGhostNode;
    }
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  
  //Evaluate the function
  m_vFunction.evaluate(innerState.getCoordinates(),m_input);
  m_gammaN = m_input[0];
  m_gammaO = m_input[1];

  const CFreal RUNIV = this->m_library->getRgas();
  CFreal diff_coeff = 0.0;
  cf_assert(this->m_tempID < innerState.size());
  
  GeometricEntity *const face = this->getMethodData().getCurrentFace();
  cf_assert(face != CFNULL);
  const CFuint faceID = face->getID();
  const CFuint startID = faceID*dim;
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  for (CFuint i = 0; i < dim; ++i) {
    cf_assert(this->m_faceNormal.size() == dim);
    this->m_faceNormal[i] = normals[startID + i];
  }
  
  MathFunctions::computeProjectedPoint(*face->getNode(0), this->m_faceNormal, innerState.getCoordinates(), m_proj);
  const CFreal walldistance = MathFunctions::getDistance(innerState.getCoordinates(), m_proj);
    
  // When we initialize the wall distance is to yet available,
  // so we just extrapolate the ghost states
  const CFuint currIter = SubSystemStatusStack::getActive()->getNbIter();
  if (this->getMethodData().isInitializationPhase() || 
      (currIter < 1 && (!this->getMethodData().isRestart())) || 
      (currIter == startIter && this->m_fullLoop)) { // this last case refers to when the user interactively changes from adiabatic to catalytic 
    
    for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
      ghostState[i] = innerState[i];
    }
    for (CFuint i = this->m_nbSpecies; i < this->m_nbSpecies+dim; ++i) {
      cf_assert(i < ghostState.size());
      ghostState[i] = (m_oldVersion) ? 0.0 : 
	((Tghost > 0.) ? -innerState[i] : 0.);
    }
    for (CFuint it = 0; it < this->m_innerTTvib.size(); ++it) {
      ghostState[this->m_nbSpecies+dim+it] = (m_oldVersion) ? this->m_wallTemp : 
	((Tghost > 0.) ? Tghost : this->m_wallTemp);
    }
  }
  else{
    // Compute the molar fraction: We first compute the massic fraction
    // and then we convert to molar fraction
    compute_mass_fraction(innerState, ghostState, m_yb, m_yi, m_rhob, m_rhoi);
    mass_frac_to_mol_frac(m_yb, m_yi, m_xb, m_xi);
    
    CFreal press = 0.;
    if (!m_oldVersion) {
      // linear interpolation of mass fractions
      // m_*b is value in the ghost
      // m_*w is value on the boundary
      this->linearInterpolateToB(m_yi, m_yb, m_yw);
      this->m_library->getSpeciesMolarFractions(m_yw, m_xw);
      
      // assumption: wall pressure = inner pressure
      this->m_library->setSpeciesFractions(m_yi);
      cf_assert(this->m_innerTTvib[0] > 0.);
      press = this->m_library->pressure(m_rhoi, this->m_innerTTvib[0], CFNULL);
    }
    else {
      m_yw = m_yb;
      m_xw = m_xb;
      this->m_library->setSpeciesFractions(m_yw);
      press = this->m_library->pressure(m_rhoi, this->m_wallTemp, CFNULL);
    }
    
    // Newton loop (few loops are necessary)
    for (CFuint k = 0; k < m_nl; k++) 
    { 
      for (CFuint i = 0; i < this->m_nbSpecies; ++i) 
      {
	  m_dx[i] = m_xw[i] - m_xi[i]; // gradient of molar fraction X through the boundary
      }
      m_dx /= walldistance;
      
      // at the wall pressure=internal pressure, wall temperature
      if (!m_oldVersion) {
        this->m_library->setSpeciesFractions(m_yw);
      }
      this->m_library->getDij_fick(m_dx, press, this->m_wallTemp, m_Dbin, m_Diff_flux);
      CFreal mmt = 0.;
      getMolarMass(m_xw,mmt);
      CFreal rhow = press/(RUNIV/mmt*this->m_wallTemp);
      getWallRateProd(rhow, m_yw, this->m_wallTemp, m_nu, m_muN, m_muO, m_muN2, m_muNO, m_muO2, m_omega);
      
      // Compute the right hand side that is diff_flux - m_omega
      for (CFuint i = 0; i < this->m_nbSpecies; ++i) 
      {
	m_b[i] = m_Diff_flux[i] - m_omega[i];
      }
      
    // We compute the derivative of the wall production and diffusive flux by numerical perturbation
    m_xp = m_xw;
    m_dxp = m_dx;
    for (CFuint i = 0; i < this->m_nbSpecies; ++i) 
    { 
      for (CFuint j = 0; j < this->m_nbSpecies; ++j) 
      { 
	const CFreal epsX = m_xw[j]*m_eps;
	const CFreal eps2 = (epsX > 0.) ? epsX : m_eps;
	const CFreal eps = (m_oldVersion) ? m_eps : eps2;
	m_xp[j] = m_xw[j] + eps;
	m_dxp[j] = (m_xp[j] - m_xi[i])/walldistance;
	
	this->m_library->getSpeciesMassFractions(m_xp, m_yp);
	this->m_library->setSpeciesFractions(m_yp);
	getMolarMass(m_xp,mmt);
	rhow = press/(RUNIV/mmt*this->m_wallTemp);
	
	getWallRateProd(rhow, m_yp, this->m_wallTemp, m_nu, m_muN, m_muO, m_muN2, m_muNO, m_muO2, m_omegap);
		
	this->m_library->getDij_fick(m_dxp, press, this->m_wallTemp, m_Dbin, m_Diff_fluxp);
	
	m_a(i,j)= ((m_Diff_fluxp[i]-m_Diff_flux[i]) -(m_omegap[i] - m_omega[i]))/eps;
	m_xp[j] = m_xw[j];
	m_dxp[j] = m_dx[j];
      }
    } 
    m_inverter->invert(m_a, m_inva);
    m_b = m_inva*m_b; 
    m_xw -= m_b;
    
    this->m_library->getSpeciesMassFractions(m_xw, m_yw);
    this->m_library->setSpeciesFractions(m_yw);
  }
    
    //  if (m_oldVersion) {
    // We go back to the partial densities
    // CFreal pressI = this->m_library->pressure(m_rhoi, this->m_innerTTvib[0], CFNULL);
    // mol_frac_to_part_dens(m_xb, pressI, this->m_wallTemp, m_partrho);
    mol_frac_to_part_dens(m_xw, press, this->m_wallTemp, m_partrho);
    
    // sanity check
    this->linearInterpolate(m_yi, m_yw, m_yg);
    m_yg = max(0.,m_yg);
    // m_yg = max(0.,2.*m_yw - m_yi);
    
    CFreal sumYi = 0.;
    for (CFuint s = 0; s < this->m_nbSpecies; ++s) {
      sumYi += m_yg[s];
    }
    if (sumYi > 1.1) cout << "sumYi = " << sumYi << endl;
    cf_assert(sumYi < 1.1);
    
    for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
      // sanity check
      // RealSliceVector rhoi = innerState.slice(0, this->m_nbSpecies);
      // this->linearInterpolate(innerState.slice(), m_partrho, m_yg);
            
      ghostState[i] = std::max(0.0,(2.0*m_partrho[i] - innerState[i]));
    }
    for (CFuint i = this->m_nbSpecies; i < this->m_nbSpecies+dim; ++i) {
      ghostState[i] = -innerState[i];
    }
    for (CFuint it = 0; it < this->m_innerTTvib.size(); ++it) { 
      const CFuint idx = this->m_nbSpecies+dim+it;
      ghostState[idx] = std::max(100.0, Tghost);
    }
    
    /*}
      else {
      //this->linearInterpolate(m_yi, m_yb, m_yg);
      m_yg = max(0.,2.*m_yb - m_yi);
      
      CFreal yiOvM = 0.;
      CFreal sumYi = 0.;
      for (CFuint s = 0; s < this->m_nbSpecies; ++s) {
      yiOvM += m_yg[s]/m_mm[s];
      sumYi += m_yg[s];
      }
      
      if (sumYi > 1.0001) cout << "sumYi = " << sumYi << endl;
      cf_assert(sumYi < 1.0001);
      
      // CFreal tempI = innerState[this->m_tempID];
      //     const CFreal pressI = this->m_library->pressure(m_rhoi, tempI, CFNULL);
      //     const CFreal rhoG =  pressI/(this->m_library->getRgas()*std::max(100., Tghost)*yiOvM);\\ doesn't work
      // const CFreal rhoG =  press/(this->m_library->getRgas()*this->m_ghostTTvib[0]*yiOvM); \\ doesn't work
      const CFreal rhoG =  press/(this->m_library->getRgas()*std::max(100., Tghost)*yiOvM); 
      for (CFuint i = 0; i < this->m_nbSpecies; ++i)  {
      ghostState[i] = std::max(0.,rhoG*m_yg[i]);
      }
    
      for (CFuint i = this->m_nbSpecies; i < this->m_nbSpecies+dim; ++i) {
      //this->linearInterpolate(innerState[i], 0.0, ghostState[i]);
      ghostState[i] = (Tghost > 0.) ? -innerState[i] : 0.;
      }
      
      for (CFuint it = 0; it < this->m_innerTTvib.size(); ++it) {
      const CFuint idx = this->m_nbSpecies+dim+it;
      cf_assert(idx < ghostState.size());
      cf_assert(it < this->m_ghostTTvib.size());
      // ghostState[idx] = this->m_ghostTTvib[it]; 
      ghostState[idx] = std::max(100.0, Tghost);
      } 
    }*/
  }
  // cout.precision(12); cout << "ghostState     = " << ghostState << endl;
 }    
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::MathTools;
  
  NoSlipWallIsothermalNSrvt<MODEL>::setup();
  
  m_inverter.reset(MatrixInverter::create(this->m_nbSpecies, false));
  
  m_input.resize(m_functions.size());
  // AL: only N and O for now
  cf_assert(m_functions.size() == 2);
  
  m_yi.resize(this->m_nbSpecies);
  m_xi.resize(this->m_nbSpecies);
  m_yb.resize(this->m_nbSpecies);
  m_yw.resize(this->m_nbSpecies);
  m_yp.resize(this->m_nbSpecies);
  m_yg.resize(this->m_nbSpecies);
  m_xb.resize(this->m_nbSpecies);
  m_xw.resize(this->m_nbSpecies);
  m_xp.resize(this->m_nbSpecies);
  m_mm.resize(this->m_nbSpecies);
  m_dx.resize(this->m_nbSpecies);
  m_dxp.resize(this->m_nbSpecies);
  m_omega.resize(this->m_nbSpecies);
  m_omegap.resize(this->m_nbSpecies);
  m_Diff_flux.resize(this->m_nbSpecies);
  m_Diff_fluxp.resize(this->m_nbSpecies);
  m_b.resize(this->m_nbSpecies);
  m_zero.resize(this->m_nbSpecies, 0.);
  m_mcal.resize(this->m_nbSpecies);
  m_partrho.resize(this->m_nbSpecies);
  m_rhoG.resize(this->m_nbSpecies);
  m_gammaV.resize(this->m_nbSpecies);
  m_proj.resize(PhysicalModelStack::getActive()->getDim());
  
  m_Dbin.resize(this->m_nbSpecies,this->m_nbSpecies);
  m_nu.resize(this->m_nbSpecies,m_nr);
  m_muN.resize(this->m_nbSpecies,m_nr);
  m_muO.resize(this->m_nbSpecies,m_nr);
  m_muN2.resize(this->m_nbSpecies,m_nr);
  m_muNO.resize(this->m_nbSpecies,m_nr);
  m_muO2.resize(this->m_nbSpecies,m_nr);
  m_a.resize(this->m_nbSpecies,this->m_nbSpecies);
  m_inva.resize(this->m_nbSpecies,this->m_nbSpecies);
    
  if (this->m_nbSpecies == 5){
     m_nu(0,0) = 1.; m_nu(1,0) = 0.; m_nu(2,0) = 0.; m_nu(3,0) = 0.; m_nu(4,0) = 0.;
     m_nu(0,1) = 0.; m_nu(1,1) = 1.; m_nu(2,1) = 0.; m_nu(3,1) = 0.; m_nu(4,1) = 0.;
     
     m_muN(0,0) = 0.; m_muN(1,0) = 0.; m_muN(2,0) = 1.; m_muN(3,0) = 0.; m_muN(4,0) = 0.;
     m_muN(0,1) = 0.; m_muN(1,1) = 0.; m_muN(2,1) = 0.; m_muN(3,1) = 0.; m_muN(4,1) = 0.; 
     
     m_muO(0,0) = 0.; m_muO(1,0) = 0.; m_muO(2,0) = 0.; m_muO(3,0) = 0.; m_muO(4,0) = 0.;
     m_muO(0,1) = 0.; m_muO(1,1) = 0.; m_muO(2,1) = 0.; m_muO(3,1) = 0.; m_muO(4,1) = 1.; 
   }
  
  if (this->m_nbSpecies == 11){
      // First equation is N+N->N2  and second is O+O->O2  
      // If a species is destroyed nu=1 otherzise 0
      m_nu(0,0) = 0.; m_nu(1,0) = 1.; m_nu(2,0) = 0.; m_nu(3,0) = 0.; m_nu(4,0) = 0.; m_nu(5,0) = 0.;
      m_nu(5,0) = 0.; m_nu(7,0) = 0.; m_nu(8,0) = 0.; m_nu(9,0) = 0.; m_nu(10,0) = 0.; 
      m_nu(0,1) = 0.; m_nu(1,1) = 0.; m_nu(2,1) = 1.; m_nu(3,1) = 0.; m_nu(4,1) = 0.;  m_nu(5,1) = 0.; m_nu(6,1) = 0.;
      m_nu(7,1) = 0.; m_nu(8,1) = 0.;  m_nu(9,1) = 0.; m_nu(10,1) = 0.;
     
     //if a specises is created by destroying N muN=1
     m_muN(0,0) = 0.; m_muN(1,0) = 0.; m_muN(2,0) = 0.; m_muN(3,0) = 1.; m_muN(4,0) = 0.; m_muN(5,0) = 0.;
     m_muN(6,0) = 0.; m_muN(7,0) = 0.; m_muN(8,0) = 0.; m_muN(9,0) = 0.; m_muN(10,0) = 0.;
     m_muN(0,1) = 0.; m_muN(1,1) = 0.; m_muN(2,1) = 0.; m_muN(3,1) = 0.; m_muN(4,1) = 0.; m_muN(5,1) = 0.;
     m_muN(6,1) = 0.; m_muN(7,1) = 0.; m_muN(8,1) = 0.; m_muN(9,1) = 0.; m_muN(10,1) = 0.;
     
     m_muO(0,0) = 0.; m_muO(1,0) = 0.; m_muO(2,0) = 0.; m_muO(3,0) = 0.; m_muO(4,0) = 0.; m_muO(5,0) = 0.;
     m_muO(6,0) = 0.; m_muO(7,0) = 0.; m_muO(8,0) = 0.; m_muO(9,0) = 0.; m_muO(10,0) = 0.;
     m_muO(0,1) = 0.; m_muO(1,1) = 0.; m_muO(2,1) = 0.; m_muO(3,1) = 0.; m_muO(4,1) = 0.; m_muO(5,1) = 1.;
     m_muO(6,1) = 0.; m_muO(7,1) = 0.; m_muO(8,1) = 0.; m_muO(9,1) = 0.; m_muO(10,1) = 0.;
   }

  // the temperature ID is equal to the maximum velocity ID + 1
  this->m_library->getMolarMasses(m_mm);
}      

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::configure ( Config::ConfigArgs& args )
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::MathTools;
  
  CFAUTOTRACE;

  FVMCC_BC::configure(args);

  // configure the expression for the boundary values
  this->m_vFunction.setFunctions(this->m_functions);
  this->m_vFunction.setVariables(this->m_vars);
  try {
    this->m_vFunction.parse();
  }
  catch (Common::ParserException& e) {
    CFout << e.what() << "\n";
    throw; // retrow the exception to signal the error to the user
  }
 //  // configure the expression that controls if to apply or not the BC
//   try {
//     if (!this->m_conditionStr.empty()) { setCondition(); }
//   }
//   catch (Common::ParserException& e) {
//     CFout << e.what() << "\n";
//     throw; // retrow the exception to signal the error to the user
//   }
 
}

////////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::setCondition()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::MathTools;
  
//   // some sanity checks
//   if (Common::StringOps::getWords(this->m_conditionStr).size() != 1)
//     throwConditionException (FromHere(),"included spaces in definition");

 //  if (this->m_vars.empty())
//     throwConditionException (FromHere(),"didnt define the variables");

//   // join the variables into a single comma separated string
//   std::string vars (this->m_vars[0]);
//   for(CFuint i = 1; i < this->m_vars.size(); i++) {
//     vars += ",";
//     vars += this->m_vars[i];
//   }
  
//   this->m_condition.Parse(this->m_conditionStr,vars);
//   if (this->m_condition.ErrorMsg() != 0) {
//     throwConditionException (FromHere(), std::string(this->m_condition.ErrorMsg()));
//   }
//   this->m_checkCondition = true;
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::throwConditionException 
(const Common::CodeLocation& where, const std::string& add)
{
//   std::string msg("ParseError in NoSlipWallIsothermalNSrvtCatT::setCondition(): ");
//   msg += add;
//   msg += " Condition function: " + this->m_conditionStr;
//   msg += " Vars: ";
//   for(CFuint i = 0; i < this->m_vars.size(); i++) {
//     msg += this->m_vars[i];
//     msg += " ";
//   }
//   throw Common::ParserException (where,msg);
}

//////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::compute_mass_fraction
(const Framework::State& innerState, const Framework::State& ghostState, 
 RealVector& yb, RealVector& yi, CFreal& rhob, CFreal& rhoi)
{
  rhoi = 0.0;
  rhob = 0.0;
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    rhoi += innerState[i];
    rhob += ghostState[i];
  }
  
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    yi[i] = innerState[i]/rhoi;
    yb[i] = ghostState[i]/rhob;
  }
}

//////////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::mass_frac_to_mol_frac
(const RealVector& yb, const RealVector& yi, RealVector& xb, RealVector& xi)
{
  // First we compute the molar mass of the gas
  CFreal gasmmi = 0.;
  CFreal gasmmb = 0.;
  CFreal tmpi = 0.0;
  CFreal tmpb = 0.0;
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    tmpi += yi[i]/this->m_mm[i];
    tmpb += yb[i]/this->m_mm[i];    
  }
  
  gasmmi = 1.0/tmpi;
  gasmmb = 1.0/tmpb;
  
  //   CF_DEBUG_OBJ(gasmmi);
  //   CF_DEBUG_OBJ(gasmmb);
  /*  CF_DEBUG_OBJ(this->m_mm);*/
  //   CF_DEBUG_OBJ(yb);
  
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    xi[i] = yi[i]/this->m_mm[i];
    xb[i] = yb[i]/this->m_mm[i];
  }
  
  xi *= gasmmi;
  xb *= gasmmb;
  
  // CF_DEBUG_OBJ(xb);
}
//////////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::mol_frac_to_part_dens
(const RealVector& xb, CFreal press, CFreal Tw, RealVector& partrho)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  const CFreal RUNIV = this->m_library->getRgas();
  CFreal gasmm = 0.;
  CFreal rho = 0.;
  
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    gasmm += xb[i]*this->m_mm[i];
    
  }
  
  const CFreal Rgb = RUNIV/gasmm;
  rho = press/(Rgb*Tw);
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    partrho[i] = (xb[i]*this->m_mm[i]/gasmm);
  }
  partrho *= rho;  
}

//////////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::mol_frac_to_mass_frac
(const RealVector& xb, RealVector& yb)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  CFreal gasmm = 0.;
  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    gasmm += xb[i]*this->m_mm[i];
  }

  for (CFuint i = 0; i < this->m_nbSpecies; ++i) {
    yb[i] = (xb[i]*this->m_mm[i]/gasmm);
  }
}

//////////////////////////////////////////////////////////////////////////////
      
template <class MODEL>
void NoSlipWallIsothermalNSrvtCatT<MODEL>::getWallRateProd(const CFreal rhob,
							   const RealVector& yb,
							   const CFreal Tw,
							   const RealMatrix& nu,
							   const RealMatrix& muN,
							   const RealMatrix& muO,
							   const RealMatrix& muN2,
							   const RealMatrix& muNO,
							   const RealMatrix& muO2,
							   RealVector& omegawall)
{                      
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  const CFreal Runiv = this->m_library->getRgas();
  const CFreal Pi = MathConsts::CFrealPi();
  CFreal tmp = 0.;
  CFreal tmp2 = 0.;
  
  for (CFuint i= 0; i<this->m_nbSpecies; i++)
  {
    // We first compute the impinging flux times mi (for derivation see with NV)
    this->m_mcal[i] = yb[i]*rhob*std::sqrt(Tw*Runiv/(2.0*Pi*this->m_mm[i]));
    // CF_DEBUG_OBJ( yb[i]);
    // CF_DEBUG_OBJ(Tw);
    // CF_DEBUG_OBJ(rhob);
    //   CF_DEBUG_OBJ(this->m_mcal[i]);
  }
  
  /* CF_DEBUG_OBJ(this->m_mcal[0]);
     CF_DEBUG_OBJ(this->m_mcal[1]);*/
  /*
    CF_DEBUG_OBJ(this->m_mcal[2]);
    CF_DEBUG_OBJ(this->m_mcal[3]);
    CF_DEBUG_OBJ(this->m_mcal[4]);*/
  
  // AL: bug here for air11 
  m_gammaV = 0.;
  CFreal mcalN = 0.;
  CFreal mcalO = 0.;

  if (this->m_nbSpecies == 5){
    mcalN = m_mcal[0];
    mcalO = m_mcal[1];
    m_gammaV[0] = this->m_gammaN;
    m_gammaV[1] = this->m_gammaO;
  }
  
  if (this->m_nbSpecies == 11){
    mcalN = m_mcal[1];
    mcalO = m_mcal[2];
    m_gammaV[1] = this->m_gammaN;
    m_gammaV[2] = this->m_gammaO;
  }

  for (CFuint i= 0; i < this->m_nbSpecies; i++)
  {
    // Now we compute the destructing part and the production part
    tmp = 0.0;
    tmp2 = 0.0;
    for (CFuint r = 0; r < this->m_nr; r++)
    {
   
      tmp += m_gammaV[i]*this->m_nu(i,r);
      tmp2 += (this->m_gammaN*this->m_muN(i,r)*this->m_mcal[0]  + this->m_gammaO*this->m_muO(i,r)*this->m_mcal[1] );
  
    }
    tmp *= this->m_mcal[i];
    omegawall[i] = tmp - tmp2; 
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
