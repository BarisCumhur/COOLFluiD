//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace KOmega {

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void KOmegaReactionTerm<BASE>::defineConfigOptions(Config::OptionList& options)
{
//   options.addConfigOption< std::string >("Model","Type of kOmega model to use (kOmega/BSL/SST).");
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
KOmegaReactionTerm<BASE>::KOmegaReactionTerm(const std::string& name) :
  BASE(name)
{
  this->addConfigOptionsTo(this);
  
  //    _modelStr = "kOmega";
  //    setParameter("Model",&_modelStr);
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
KOmegaReactionTerm<BASE>::~KOmegaReactionTerm()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void KOmegaReactionTerm<BASE>::configure ( Config::ConfigArgs& args )
{
  BASE::configure(args);
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void KOmegaReactionTerm<BASE>::resizePhysicalData(RealVector& physicalData)
{
  // resize the physical data
  cf_assert(getDataSize() > 0);
  physicalData.resize(getDataSize());
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void KOmegaReactionTerm<BASE>::setupPhysicalData()
{
  if (getDataSize() > 0) {
    // set the size of each physical data in the StatesData
    resizePhysicalData(this->m_physicalData);
    resizePhysicalData(this->m_refPhysicalData);
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace KOmega

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
