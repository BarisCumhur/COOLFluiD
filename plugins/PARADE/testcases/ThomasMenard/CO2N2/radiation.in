# comment line
# If a command occurs more than once in this file, its latest occurence
# takes precedence
################################################################################
# direction_cosines:
#   Specify the directions for which to solve the radiation transport equation.
#   Direction cosines are with respect to the line along which the equation
#   is integrated.
#
# Syntax:
#   direction_cosines INTEGER:NMU/2
#   direction_cosines INTEGER:NMU/2 REAL:( MU(1), MU(2), ..., MU(NMU/2) )
#
# Defaults: NMU=10, MU=(-1., ..., 1.)
################################################################################
#
#direction_cosines 4 (-1.0 -0.75 -0.5 -0.25 )
direction_cosines 10 (-1.0 -0.98 -0.94 -0.87 -0.77 -0.64 -0.5 -0.34 -0.17 -0.08)
#
################################################################################
# boundary_conditions:
#   Specify Dirichlet boundary conditions on the specific intensity.
#
# Syntax:
#   boundary_conditions STRING:FILE
#
# Defaults: F=0 on all incoming characteristics
#
# The data in file FILE must be consistent with the results from PARADE
# and is to be read by the following FORTRAN code
# (number_of_direction_cosines must have previously been specified)
#--------------------------------------
#   INTEGER :: i, j, k, number_of_wavelengths, number_of_boundary_points
#   REAL :: f(:,:,:)
# ...
#   READ(unit,FMT=*) number_of_wavelengths, number_of_boundary_points
#   DO i=1, number_of_wavelengths
#     DO j=1, number_of_boundary_points
#       READ(unit,FMT=*) (f(i,k,j),k=1,number_of_direction_cosines)
#     ENDDO
#   ENDDO
#--------------------------------------
# If mu(k)>0 then the boundary condition is f=fb at z=zmin,
# else if mu(k)<0 then the boundary condition is f=fb at z=zmax
################################################################################
#
# boundary_conditions fire2.bdy
#
################################################################################
# reflection_coefficients:
#   Specify reflection coefficients at the J=1 boundary
#
# Syntax:
#   reflection_coefficients STRING:FILE
#
# Defaults: R=0 on all boundaries
#
# The data in file FILE must be consistent with the results from PARADE
# and is to be read by the following FORTRAN code
# (number_of_direction_cosines must have previously been specified)
#--------------------------------------
#   INTEGER :: i, j, k, number_of_wavelengths
#   REAL :: f(:,:,:)
# ...
#   READ(unit,FMT=*) number_of_wavelengths
#   DO i=1, number_of_wavelengths
#     READ(unit,FMT=*) (r(i,k),k=1,number_of_direction_cosines)
#   ENDDO
#--------------------------------------
# R is uniform across the boundary
################################################################################
#
# reflection_coefficients fire2.rfl
#
################################################################################
# rows:
#   The RTE is to be solved along rows
#
# Syntax:
#   rows INTEGER:N, I(1), I(2), ..., I(N)
#
# Defaults: ROWS=.FALSE.
################################################################################
#
#rows 1 1
rows 200 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
#cellnb 21 22 23 24 25 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 
#cellnb 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94
#cellnb 200 300 400
#
################################################################################
# columns:
#   The RTE is to be solved along columns
#
# Syntax:
#   columns INTEGER:N, I(1), I(2), ..., I(N)
#
# Defaults: ROWS=.FALSE., N=1, I=(1)
################################################################################
#
#columns 1 1
#
################################################################################
# full_field:
#   The full results of solving the RTE are written to the unformatted file
#   'radiation.dat'
#
# Syntax:
#  full_field (no arguments)
#
# Defaults FULL_FIELD=.FALSE.
#
# The data is written by the following FORTRAN code
#--------------------------------------
#   REAL :: f(:,:,:,:), cosines(:), wavelengths(:), x(:,:), y(:,:)
#   INTEGER :: i, indices(:)
#   LOGICAL :: rows
# ...
#   WRITE(unit) (SIZE(f,i),i=1,4)
#   WRITE(unit) rows
#   WRITE(unit) cosines(1:SIZE(f,2))
#   WRITE(unit) wavelengths(1:SIZE(f,1))
#   IF( rows) THEN
#     WRITE(unit) x(1:SIZE(f,3),indices)
#     WRITE(unit) y(1:SIZE(f,3),indices)
#   ELSE
#     WRITE(unit) x(indices,1:SIZE(f,4))
#     WRITE(unit) y(indices,1:SIZE(f,4))
#   ENDIF
#   WRITE(unit) f
#--------------------------------------
################################################################################
#
# full_field
#
################################################################################
# flux:
#   The incident energy fluxes on the boundary, within an angle THETA degrees
#   of the normal is written to the formatted file 'radiation.flx'
#
# Syntax:
#   flux
#   flux REAL:THETA_F
#
# Defaults: FLUX=.FALSE., THETA_F=90.
#
# The data is written by the following FORTRAN code
#--------------------------------------
#   REAL :: x(:,:), y(:,:), flux(:)
#   INTEGER :: i, nindices, indices(:)
# ...
#   IF( rows ) THEN
#     WRITE(unit,'(3E14.6)') &
#             (x(1,indices(i)), y(1,indices(i)), flux(i), i=1, nindices)
#   ELSE
#     WRITE(fluxesf,'(3E14.6)') &
#             (x(indices(i),1), y(indices(i),1), flux(i), i=1, nindices)
#   ENDIF
#--------------------------------------
################################################################################
#
flux 1.
#
################################################################################
# spectrum
#   The incident spectra on the boundary, within an angle THETA degrees of the
#   normal is written to the formatted file 'radiation.spc'
#
# Syntax:
#   spectrum
#   spectrum REAL:THETA_S
#
# Defaults: SPECTRUM=.FALSE., THETA_S=90.
#
# The data is written by the following FORTRAN code
#--------------------------------------
#   REAL :: x(:,:), y(:,:), wavelengths(:), spectrum(:,:)
#   INTEGER :: i, nindices, indices(:), number_of_wavelengths
# ...
#   IF( rows ) THEN
#     WRITE(unit,'(4E14.6)') &
#             ((x(1,indices(i)), y(1,indices(i)), &
#                wavelegnths(j), spectrum(j,i), i=1, nindices), &
#                                               j=1, number_of_wavelengths)
#   ELSE
#     WRITE(fluxesf,'(4E14.6)') &
#             (x(indices(i),1), y(indices(i),1), &
#                wavelegnths(j), spectrum(j,i), i=1, nindices), &
#                                               j=1, number_of_wavelengths)
#   ENDIF
#--------------------------------------
################################################################################
#
spectrum 90.
#
################################################################################
#
# absorption
#
# absorption can be suppressed to estimate worst case emissive only flux
#
################################################################################
#
absorption .true.
#
################################################################################
#
# curvature  noseradius (m) shock standoff (m)
#
# approximate spherical shock layer (use for stagnation point estimates)
#
################################################################################
#
curvature .false. 1.25  0.1
