#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/PhysicalConsts.hh"
#include "Common/CFLog.hh"
#include "Framework/GeometricEntity.hh"
#include "Common/NoSuchValueException.hh"
#include "FiniteVolume/ComputeDiffusiveFlux.hh"
#include "FiniteVolume/DerivativeComputer.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
ThreeFluidMHDST2D<UPDATEVAR>::ThreeFluidMHDST2D(const std::string& name) :
  ComputeSourceTermFVMCC(name),
  _varSet(CFNULL),
  _nstates(CFNULL),
  //socket_GammaIon("GammaIon"),
  //socket_GammaRec("GammaRec"),
  _ys(),
  _physicalData(),
  _temp(),
  _states(),
  _values(),
  _NonInducedEMField(),
  _J(),
  _dummyGradients(),
  _massSource(),
  _collMomentumSource(),
  _collEnergySource(),
  _ReactEnergySource(),
  _Btotal(),
  _Etotal()
{
  //************************************************************
  // AAL: Here you write the options you want for your class,e.g.
  // in this case the electrical resistivity commented.
  // You need to define your option like _electricalResistivity
  //************************************************************
  addConfigOptionsTo(this);
  
  // AAL: Example1. You assign a default value for the electrical resistivity
  _electricalResistivity = 0.150886049694899; //underscore means member of the class; in this line you specify the default
  setParameter("electricalResistivity",&_electricalResistivity);
  _SpitzerFlag = false; //underscore means member of the class; in this line you specify the default
  setParameter("SpitzerFlag",&_SpitzerFlag);
  //example in input file: Simulator.SubSystem.CellCenterFVM.Data.ThreeFluidMHDST2D.electricalResistivity = 1.45345
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
ThreeFluidMHDST2D<UPDATEVAR>::~ThreeFluidMHDST2D()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> >
ThreeFluidMHDST2D<UPDATEVAR>::providesSockets()
{


  //************************************************************
  // AAL: Here you ask to provide sockets, i.e. info. to show in the solution file
  // see Example2. that is commented (GammaIon). You need to declare the variable _GammaIon in the header .hh
  //************************************************************
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result = 
    ComputeSourceTermFVMCC::providesSockets();
  // AAL: Example2
  //result.push_back(&socket_GammaIon);
  //result.push_back(&socket_GammaRec);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  //************************************************************
  // AAL: Needed to add the option. Here it goes the name that will be in the .CFcase.
  // Explanation written in the config-debug-info.log
  //************************************************************
  options.template addConfigOption< CFreal >
     ("electricalResistivity", "electrical Resistivity used in Ohm's law");
  options.template addConfigOption< bool >
     ("SpitzerFlag", "Flag for Spitzer resistivity: default is False");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::setup()
{
  //************************************************************
  // AAL: This Setup is needed. Keep the following lines. Resize the arrays of data used in the class
  //************************************************************
  using namespace std;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  
  ComputeSourceTermFVMCC::setup();
  
  _varSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  _varSet->getModel()->resizePhysicalData(_physicalData);
  cf_assert(_varSet.isNotNull());
  
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  _nstates = _sockets.template getSocketSink<RealVector>("nstates")->getDataHandle();
  
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const CFuint nbSpecies = term->getNbScalarVars(0);
  _ys.resize(nbSpecies);
  
  _temp.resize(PhysicalModelStack::getActive()->getNbEq());
  const CFuint maxNbNodesIn2DCV = 4;
  _states.reserve(maxNbNodesIn2DCV);
  SafePtr<DerivativeComputer> derComput = this->getMethodData().getDerivativeComputer();
  const CFuint nbNodesInControlVolume = derComput->getMaxNbVerticesInControlVolume();
  _values.resize(PhysicalModelStack::getActive()->getNbEq(), nbNodesInControlVolume);

  //************************************************************
  // AAL: Here you need to resize ALL the member variables that are defined in the .hh to be a Vector
  //************************************************************
  // Example3: the socket GammaIon resized to nbCells and initialized to 0
  //Common::SafePtr<Common::ConnectivityTable<CFuint> > cells =
  //  MeshDataStack::getActive()->getConnectivity("cellStates_InnerCells");
  //const CFuint nbCells = cells->nbRows();
  //socket_GammaIon.getDataHandle().resize(nbCells);
  //socket_GammaRec.getDataHandle().resize(nbCells);
  //DataHandle<CFreal> GammaIon = socket_GammaIon.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  //GammaIon.resize(nbCells);
  //GammaIon = 0;
  //GammaRec.resize(nbCells);
  //GammaRec = 0;
  
  //Example4: Here I resize the vectors defined in the .hh
  //_NonInducedEMField.resize(6);
  _J.resize(3);
  _massSource.resize(3);
  _collMomentumSource.resize(6);
  //_collEnergySource.resize(2);
  //_ReactEnergySource.resize(2);
  _Btotal.resize(3);
  _Etotal.resize(3);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeSource
(Framework::GeometricEntity *const element, RealVector& source, RealMatrix& jacobian)
{
  //************************************************************
  // AAL: This is the main function. The solution is  in source []
  //************************************************************
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  //AAL: Setting up some needed variables
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const vector<State*>* const states = element->getStates();
  const CFuint elemID = element->getID();

  //AAL: Declaring in this function the sockets of the GammaIon and GammaRec
  //DataHandle<CFreal> GammaIon = socket_GammaIon.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  
  cf_assert(states->size() == 1);
 
  //
  State *const currState = (*states)[0];
  _varSet->computePhysicalData(*(*states)[0], _physicalData);
  _NonInducedEMField = _varSet->getModel()->getNonInducedEMField
    (currState->getCoordinates()[XX], currState->getCoordinates()[YY]);
  
  //   RealVector& refData = _varSet->getModel()->getReferencePhysicalData();
  DataHandle<CFreal> volumes = socket_volumes.getDataHandle();
  
  const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
  const CFuint nbEqs = eqSS.getNbEqsSS();  				
  const CFuint iEqSS = eqSS.getEqSS();
  
  //AAL: Here call all the functions needed to compute the source of Maxwell equations
  _J = 0;
  _Etotal = 0;
  _Btotal = 0;
  computeElectricCurrent();
  //YGM: common variables
    const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
    const CFreal qe = 1.60217657e-19 ;//Ã— 10-19 ;//charge of electrons in Coulombs
    const CFreal qi = qe;//charge of ions in Coulombs
    const CFreal me = 9.10934e-31;// Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
    const CFreal mi = 1.6726e-27;  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
    const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
    const CFreal rhoe = rho*_physicalData[firstDensity]; 	//electrons density
    const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
    const CFreal Qtot = qe*rhoe/me + qi*rhoi/mi;
    const CFreal qpare = qe*rhoe/me;//partial charge density for electrons
    const CFreal qpari = qi*rhoi/mi;//partial charge denisty for ions
    const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);  
    const CFuint firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
    const CFreal ue = _physicalData[firstVelocity];
    const CFreal ve = _physicalData[firstVelocity + 1];
    const CFreal ui = _physicalData[firstVelocity + 2];
    const CFreal vi = _physicalData[firstVelocity + 3];
    const CFreal un = _physicalData[firstVelocity + 4];
    const CFreal vn = _physicalData[firstVelocity + 5];
 //AAL: Here goes the source of Maxwell equations
  if (nbEqs == totalNbEqs || iEqSS == 0) {
    /// MAXWELL
    const CFreal c_e = term->getLightSpeed();
    const CFreal mu0 = term->getPermeability();
    const CFreal ovEpsilon = c_e*c_e*mu0;
 
    source[0] = 0;			//x-Faraday's Law
    source[1] = 0;			//y-Faraday's Law
    source[2] = 0;			//z-Faraday's Law
    source[3] = -_J[XX]*ovEpsilon;	//x-Ampere's Law
    source[4] = -_J[YY]*ovEpsilon;	//y-Ampere's Law
    source[5] = -_J[ZZ]*ovEpsilon;  	//z-Ampere's Law
//YGM: why extra source terms for Ampere's law here? 
//YGM: where are the source terms for the Poisson's eqn., div E=Q/eps_0?   
    source[6] = 0;			//y-Ampere's Law
    source[7] = Qtot*ovEpsilon;  			//z-Ampere's Law
  }
  
  //AAL: Here the source for three-fluid continuity, momentum and energy equations
  if (nbEqs == totalNbEqs || iEqSS == 1) {
    // AAL: Call to the functions needed to compute the source in the fluid equations
    //computeMassReactionsEnergySourceTerm();
    //computeCollisionalMomentumEnergy();
    
    //AAL: The following should be changed for the 3 Fluid case
    /// FLUID EQUATIONS
      //AAL: CONTINUITY
      const CFreal massSource_e = _massSource[0];
      const CFreal massSource_i = _massSource[1];
      const CFreal massSource_n = _massSource[2];      
      source[8] = massSource_e;					// Electrons continuity equation
      source[9] = massSource_i;					// Ions continuity equation
      source[10] = massSource_n;				// Neutrals continuity equation
      
      //AAL: MOMENTUM
     //YGM: move to 3D or 2.5D to get the z component of the current (bulk velocity)
      const CFreal we=0;
      const CFreal wi=0;

      const CFreal emMomentumXe = qpare*(_Etotal[XX] + ve*_Btotal[ZZ] - we*_Btotal[YY]);		//Electromagnetic momentum for electrons in X
      const CFreal emMomentumXi =  qpari*(_Etotal[XX] + vi*_Btotal[ZZ] - wi*_Btotal[YY]);		//Electromagnetic momentum for ions in X
      const CFreal emMomentumYe = qpare*(_Etotal[YY] +wi*_Btotal[XX] - ui*_Btotal[ZZ]);		//Electromagnetic momentum for electrons in Y
      const CFreal emMomentumYi = qpari*(_Etotal[YY] +wi*_Btotal[XX] - ui*_Btotal[ZZ]);		//Electromagnetic momentum for ions in Y
      
      const CFreal GammaIon_i = - _GammaIon_n;
      const CFreal GammaRec_n = - _GammaRec_i;
 
       //// particle mass
      const CFreal me = 9.1094e-31;// Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
      const CFreal mi = 1.6726e-27;  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
      const CFreal mn = 1.6726e-27;  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
      const CFreal collMomentumSource_ex = _collMomentumSource[0];
      const CFreal collMomentumSource_ey = _collMomentumSource[1];      
      const CFreal collMomentumSource_ix = _collMomentumSource[2];
      const CFreal collMomentumSource_iy = _collMomentumSource[3];
      const CFreal collMomentumSource_nx = _collMomentumSource[4];
      const CFreal collMomentumSource_ny = _collMomentumSource[5];
      
	//YGM: change the equations below!!
      source[11] = emMomentumXe + collMomentumSource_ix + GammaIon_i*mi*un - GammaRec_n*mi*ui; //Electrons X momentum
      source[12] = emMomentumYe + collMomentumSource_iy + GammaIon_i*mi*vn - GammaRec_n*mi*vi; //Electrons Y momentum
      
      source[13] = emMomentumXi + collMomentumSource_ix + GammaIon_i*mi*un - GammaRec_n*mi*ui; //Ions X momentum
      source[14] = emMomentumYi + collMomentumSource_iy + GammaIon_i*mi*vn - GammaRec_n*mi*vi; //Ions Y momentum
      
      source[15] = collMomentumSource_nx - GammaIon_i*mi*un + GammaRec_n*mi*ui; //Neutrals X momentum
      source[16] = collMomentumSource_ny - GammaIon_i*mi*vn + GammaRec_n*mi*vi; //Neutrals Y momentum
      
      //AAL: ENERGY
      //const CFreal emEnergy = _J[XX]*_Etotal[XX] + _J[YY]*_Etotal[YY] + _J[ZZ]*_Etotal[ZZ];
      //const CFreal collWorki = _collMomentumSource[0]*ui + _collMomentumSource[1]*vi;
      //const CFreal collWorkn = _collMomentumSource[2]*un + _collMomentumSource[3]*vn;
      //const CFreal EnergyIon = 13.6*1.60217657e-19;							//13.6eV to J
      //const CFreal kinEnerRec_n = 0.5*GammaRec_n*mi*(ui*ui + vi*vi);
      //const CFreal kinEnerIon_i = 0.5*GammaIon_i*mn*(un*un + vn*vn);
      //const CFreal kinEnerIon_e = GammaIon_i*EnergyIon;
      
      //source[14] = emEnergy + collWorki + _collEnergySource[0] + _ReactEnergySource[0] + kinEnerIon_i - kinEnerIon_e - kinEnerRec_n; //Ions Energy
      //source[15] = collWorkn + _collEnergySource[1] + _ReactEnergySource[1] - kinEnerIon_i + kinEnerRec_n; //Neutrals Energy
      
      // AAL: Write the sockets
      //if (!this->getMethodData().isPerturb()) { // Condition to avoid writing when the source is perturbed
        //if(currState->isParUpdatable()) { // Condition to write only once the partition cells
          //GammaIon[elemID] = _GammaIon_n;
          //GammaRec[elemID] = _GammaRec_i;
        //}
      //}
  }
  // AAL: Don't forget to multiply by the volume!!!!!
  source *= volumes[elemID];
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeMassReactionsEnergySourceTerm()
{
  //************************************************************
  // AAL: This is the function where we compute _GammaIon_n, _GammaRec_i, _massSource[] and _ReactEnergySource
  //************************************************************

  _GammaIon_n = 0.;
  _GammaRec_i = 0.;
  
  const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
  
  const CFreal rho  = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoi = rho*_physicalData[firstDensity]; 	        // electron density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	// ion density
  const CFreal rhon = rho*_physicalData[firstDensity + 2];	// neutrals density
  const CFreal Te   = _physicalData[firstTemperature];	        // electron Temperature
  const CFreal Ti   = _physicalData[firstTemperature + 4];	// ion Temperature
  const CFreal Tn   = _physicalData[firstTemperature + 8];      // neutrals Temperature
  

  ////Molecular Masses
  const CFreal me = 9.1094e-31;              // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mi = 1.6726e-27;              // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mn = 1.6726e-27;              // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
  
  ////electron properties
  const CFreal ne = rhoe/me;		   	// Electricolly neutral, i.e. ne = ni
  const CFreal Te = Te/11604.50520;		// electrons temperature in eV. Thermal equilibrium is assumed Ti = Te
  const CFreal ni = rhoi/mi;		   	// Electricolly neutral, i.e. ne = ni
  const CFreal Ti = Ti/11604.50520;		// electrons temperature in eV. Thermal equilibrium is assumed Ti = Te
  
  ////Neutrals and ions properties
   const CFreal nn = rhon/mn;			// neutral particle per unit volume
  //const CFreal ni = ne;			        // ion particle per unit volume
  
  //// IONIZATION
  ////constants Related to ionization frequency from [Leake]
  //const CFreal A = 2.91e-14;
  //const CFreal X = 0.232;
  //const CFreal psiIonOvTe = 13.6/Te;
  //const CFreal K = 0.39;
  
  //const CFreal nuIon = ne*A/(X + psiIonOvTe)*std::pow(psiIonOvTe, K)*std::exp(-psiIonOvTe);  // Ionization freq.
  //_GammaIon_n = -nn*nuIon;
  
  //// RECOMBINATION
  ////constant related to recombination
  //const CFreal B = 2.6e-19;
  //const CFreal nuRec = ne/std::sqrt(Te)*B;
  //_GammaRec_i = -ni*nuRec;
  
  ////TOTAL (particles/m3)
  const CFreal kB = Framework::PhysicalConsts::Boltzmann(); // Boltzmann constant
  const CFreal GammaIon_i = - _GammaIon_n;
  const CFreal GammaRec_n = - _GammaRec_i;
  //const CFreal GammaIon_e = _GammaRec_i;
  //const CFreal GammaRec_e = _GammaRec_i;
  //const CFreal electronsParticlesRate = (_GammaIon_e + _GammaRec_e);
  const CFreal ionsParticlesRate     = (_GammaIon_i + _GammaRec_i);
  const CFreal neutralsParticlesRate = (_GammaIon_n + _GammaRec_n);
  
  ////RESULT
  _massSource[0] = me*ionsParticlesRate;
  _massSource[2] = mi*ionsParticlesRate;
  _massSource[3] = mn*neutralsParticlesRate;
  
  //const CFreal Qion_i = 1.5*GammaIon_i*kB*Tn;
  //const CFreal Qrec_n = 1.5*GammaRec_n*kB*Ti;
  
  //_ReactEnergySource[0] = Qion_i - Qrec_n;   //IONS
  //_ReactEnergySource[1] = -Qion_i + Qrec_n;  //NEUTRALS
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeElectricCurrent()
{
  //************************************************************
  // AAL: This is the function where we compute the total current, _J[]
  //************************************************************

  const CFreal firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  const CFreal firstDensity = _varSet->getModel()->getFirstScalarVar(0);

  //// Total Electromagnetic Field
  _Btotal[XX] = _physicalData[UPDATEVAR::PTERM::BX] + _NonInducedEMField[0];
  _Btotal[YY] = _physicalData[UPDATEVAR::PTERM::BY] + _NonInducedEMField[1];
  _Btotal[ZZ] = _physicalData[UPDATEVAR::PTERM::BZ] + _NonInducedEMField[2];
  _Etotal[XX] = _physicalData[UPDATEVAR::PTERM::EX] + _NonInducedEMField[3];
  _Etotal[YY] = _physicalData[UPDATEVAR::PTERM::EY] + _NonInducedEMField[4];
  _Etotal[ZZ] = _physicalData[UPDATEVAR::PTERM::EZ] + _NonInducedEMField[5];
  
  //// Particle velocities

  const CFreal ue = _physicalData[firstVelocity];
  const CFreal ve = _physicalData[firstVelocity + 1];
  const CFreal ui = _physicalData[firstVelocity+2];
  const CFreal vi = _physicalData[firstVelocity + 3];
  const CFreal un = _physicalData[firstVelocity+4];
  const CFreal vn = _physicalData[firstVelocity + 5];
  
  //const CFreal eta = _electricalResistivity;
  //const CFreal sigma = 1/eta;
  const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 		//electrons density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
  const CFreal rhon = rho*_physicalData[firstDensity + 2];  
  
  const CFreal me = 9.1094e-31;  // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mi = 1.6726e-27;  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mn = 1.6726e-27;  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings

 //YGM: check if we want to use the velocities to calculate the current, as this would mean Jz=0 in the 2D case! 
  const CFreal we =0; //get the vertical velocities from 2.5D or 3D
  const CFreal wi =0;
  const CFreal Jx = rhoe*me*ue + rhoi*mi*ui;
  const CFreal Jy = rhoe*me*ve + rhoi*mi*vi;
  const CFreal Jz = rhoe*me*we + rhoi*mi*wi;
  //const CFreal Jz = sigma*(_Etotal[ZZ] + ui*_Btotal[YY] - vi*_Btotal[XX]); //left over from the MHD case
  
  _J[XX] = Jx;
  _J[YY] = Jy;
  _J[ZZ] = Jz;
}

///////////////////////
///////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeCollisionalMomentumEnergy()
{
  //************************************************************
  // AAL: This is the function where we compute the _collMomentumSource[] and _collEnergySource[]
  //************************************************************

  const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  const CFreal firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
  
  //// particles density, temperature
//YGM: where and how do we define rho?
  const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 		//electrons density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
  const CFreal rhon = rho*_physicalData[firstDensity + 2]; 	//neutrals density
  
  const CFreal Te = _physicalData[firstTemperature];
  const CFreal Ti = _physicalData[firstTemperature + 4];
  const CFreal Tn = _physicalData[firstTemperature + 8];

  const CFreal ue = _physicalData[firstVelocity];
  const CFreal ve = _physicalData[firstVelocity + 1]; 
  const CFreal ui = _physicalData[firstVelocity + 2];
  const CFreal vi = _physicalData[firstVelocity + 3];
  const CFreal un = _physicalData[firstVelocity + 4];
  const CFreal vn = _physicalData[firstVelocity + 5];
  
  //// particle mass
  const CFreal me = 9.10934e-31;  // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mi = 1.6726e-27;  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mn = 1.6726e-27;  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
  
  //// particles per volume
  const CFreal ni = rhoe/me;
  const CFreal ni = rhoi/mi;
  const CFreal nn = rhon/mn;
  
  ////parameters
  const CFreal m_in = mi*mn/(mi + mn);
  const CFreal Sigma_in = 1.41e-19;		//collisional cross-section m2 from [Draine:83]; 1.16e-18 [Leake]
  const CFreal T_in = (Ti + Tn)/2;
  const CFreal kB = Framework::PhysicalConsts::Boltzmann(); // Boltzmann constant
  const CFreal pi = MathTools::MathConsts::CFrealPi(); //Pi number
//YGM: check the value of Sigma_en!
  const CFreal m_en = me*mn/(me + mn);
  const CFreal Sigma_en = 1.41e-19;		//collisional cross-section m2 for electrons-neutrals
  const CFreal T_en = (Te + Tn)/2;  
  const CFreal m_ie = mi*me/(mi + me);
//YGM: check the value of Sigma_ie!
  const CFreal Sigma_ie = 1.41e-19;		//collisional cross-section m2 for electrons ions
  const CFreal T_ie = (Ti + Te)/2; 

  ////collision Frequency
  const CFreal nu_in = nn*Sigma_in*std::sqrt(8.*kB*T_in/(pi*m_in));
  const CFreal m_n_nu_in = m_in*ni*nu_in;
  const CFreal Rin_ix = m_n_nu_in*(un - ui);
  const CFreal Rin_iy = m_n_nu_in*(vn - vi);
 //YGM: added the e-i and e-n contributions
//YGM: check from here on!!
  const CFreal nu_en = nn*Sigma_en*std::sqrt(8.*kB*T_en/(pi*m_en));
  const CFreal m_n_nu_en = m_en*ni*nu_en;
  const CFreal Ren_ix = m_n_nu_en*(un - ue);
  const CFreal Ren_iy = m_n_nu_en*(vn - ve);
  const CFreal nu_ie = ne*Sigma_ie*std::sqrt(8.*kB*T_ie/(pi*m_ie));
  const CFreal m_n_nu_ie = m_ie*ni*nu_ie;
  const CFreal Rie_ix = m_n_nu_ie*(ue - ui);
  const CFreal Rie_iy = m_n_nu_ie*(ve - vi);
  
  ////ions momentum
  _collMomentumSource[0] = Ren_ix - Rie_ix;
  _collMomentumSource[1] = Ren_iy - Rie_iy;
  _collMomentumSource[2] = Rin_ix + Rie_ix;
  _collMomentumSource[3] = Rin_iy + Rie_iy;

  ////neutrals momentum
  _collMomentumSource[4] = -Rin_ix - Ren_ix;
  _collMomentumSource[5] = -Rin_iy - Ren_iy;
  
  //const CFreal kinEnergin_i = 0.5*(Rin_ix*(un - ui) + Rin_iy*(vn - vi)); //exchange due to different kinetic energy
  //const CFreal intEnergin_i = 3.*m_n_nu/mi*kB*(Tn - Ti); // exchange due to different temperatures
  //const CFreal Qin_i = kinEnergin_i + intEnergin_i;  // source in ions energy due to collisions with neutrals
  
  //_collEnergySource[0] = Qin_i;	  // IONS
  //_collEnergySource[1] = -Qin_i;  // NEUTRALS

}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
