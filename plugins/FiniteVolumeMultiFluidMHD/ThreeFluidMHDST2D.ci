#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/PhysicalConsts.hh"
#include "Common/CFLog.hh"
#include "Framework/GeometricEntity.hh"
#include "Common/NoSuchValueException.hh"
#include "FiniteVolume/ComputeDiffusiveFlux.hh"
#include "FiniteVolume/DerivativeComputer.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
ThreeFluidMHDST2D<UPDATEVAR>::ThreeFluidMHDST2D(const std::string& name) :
  ComputeSourceTermFVMCC(name),
  _varSet(CFNULL),
  _nstates(CFNULL),
  socket_GammaIon("GammaIon"),
  socket_GammaRec("GammaRec"),
  _ys(),
  _physicalData(),
  _temp(),
  _states(),
  _values(),
  _NonInducedEMField(),
  _J(),
  _dummyGradients(),
  _massSource(),
  _collMomentumSource(),
  _collEnergySource(),
  _ReactEnergySource(),
  _Btotal(),
  _Etotal()
{
  //************************************************************
  // AAL: Here you write the options you want for your class,e.g.
  // in this case the electrical resistivity commented.
  // You need to define your option like _electricalResistivity
  //************************************************************
  addConfigOptionsTo(this);
  
  // AAL: Example1. You assign a default value for the electrical resistivity
  //_electricalResistivity = 0.150886049694899;
  //setParameter("electricalResistivity",&_electricalResistivity);
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
ThreeFluidMHDST2D<UPDATEVAR>::~ThreeFluidMHDST2D()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> >
ThreeFluidMHDST2D<UPDATEVAR>::providesSockets()
{


  //************************************************************
  // AAL: Here you ask to provide sockets, i.e. info. to show in the solution file
  // see Example2. that is commented (GammaIon). You need to declare the variable _GammaIon in the header .hh
  //************************************************************
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result = 
    ComputeSourceTermFVMCC::providesSockets();
  // AAL: Example2
  //result.push_back(&socket_GammaIon);
  //result.push_back(&socket_GammaRec);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  //************************************************************
  // AAL: Needed to add the option. Here it goes the name that will be in the .CFcase.
  //************************************************************
  //options.template addConfigOption< CFreal >
     //("electricalResistivity", "electrical Resistivity used in Ohm's law");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::setup()
{
  //************************************************************
  // AAL: This Setup is needed. Keep the following lines
  //************************************************************
  using namespace std;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  
  ComputeSourceTermFVMCC::setup();
  
  _varSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  _varSet->getModel()->resizePhysicalData(_physicalData);
  cf_assert(_varSet.isNotNull());
  
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  _nstates = _sockets.template getSocketSink<RealVector>("nstates")->getDataHandle();
  
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const CFuint nbSpecies = term->getNbScalarVars(0);
  _ys.resize(nbSpecies);
  
  _temp.resize(PhysicalModelStack::getActive()->getNbEq());
  const CFuint maxNbNodesIn2DCV = 4;
  _states.reserve(maxNbNodesIn2DCV);
  SafePtr<DerivativeComputer> derComput = this->getMethodData().getDerivativeComputer();
  const CFuint nbNodesInControlVolume = derComput->getMaxNbVerticesInControlVolume();
  _values.resize(PhysicalModelStack::getActive()->getNbEq(), nbNodesInControlVolume);

  //************************************************************
  // AAL: Here you need to resize ALL the member variables that are defined in the .hh to be a Vector
  //************************************************************
  // Example3: the socket GammaIon resized to nbCells and initialized to 0
  //Common::SafePtr<Common::ConnectivityTable<CFuint> > cells =
  //  MeshDataStack::getActive()->getConnectivity("cellStates_InnerCells");
  //const CFuint nbCells = cells->nbRows();
  //socket_GammaIon.getDataHandle().resize(nbCells);
  //socket_GammaRec.getDataHandle().resize(nbCells);
  //DataHandle<CFreal> GammaIon = socket_GammaIon.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  //GammaIon.resize(nbCells);
  //GammaIon = 0;
  //GammaRec.resize(nbCells);
  //GammaRec = 0;
  
  //Example4: Here I resize the vectors defined in the .hh
  //_NonInducedEMField.resize(6);
  //_J.resize(3);
  //_massSource.resize(2);
  //_collMomentumSource.resize(4);
  //_collEnergySource.resize(2);
  //_ReactEnergySource.resize(2);
  //_Btotal.resize(3);
  //_Etotal.resize(3);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeSource
(Framework::GeometricEntity *const element, RealVector& source, RealMatrix& jacobian)
{
  //************************************************************
  // AAL: This is the main function. The solution is  in source []
  //************************************************************
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  //AAL: Setting up some needed variables
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const vector<State*>* const states = element->getStates();
  const CFuint elemID = element->getID();

  //AAL: Declaring in this function the sockets of the GammaIon and GammaRec
  //DataHandle<CFreal> GammaIon = socket_GammaIon.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  
  cf_assert(states->size() == 1);
 
  //
  State *const currState = (*states)[0];
  _varSet->computePhysicalData(*(*states)[0], _physicalData);
  _NonInducedEMField = _varSet->getModel()->getNonInducedEMField
    (currState->getCoordinates()[XX], currState->getCoordinates()[YY]);
  
  //   RealVector& refData = _varSet->getModel()->getReferencePhysicalData();
  DataHandle<CFreal> volumes = socket_volumes.getDataHandle();
  
  const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
  const CFuint nbEqs = eqSS.getNbEqsSS();  				
  const CFuint iEqSS = eqSS.getEqSS();
  
  //AAL: Here call all the functions needed to compute the source of Maxwell equations
  //computeElectricCurrent();

  //AAL: Here it goes the source of Maxwell equations
  //if (nbEqs == totalNbEqs || iEqSS == 0) {
    /// MAXWELL
    //const CFreal c_e = term->getLightSpeed();
    //const CFreal mu0 = term->getPermeability();
    //const CFreal ovEpsilon = c_e*c_e*mu0;
    
    //source[0] = 0;			//x-Faraday's Law
    //source[1] = 0;			//y-Faraday's Law
    //source[2] = 0;			//z-Faraday's Law
    //source[3] = -_J[XX]*ovEpsilon;	//x-Ampere's Law
    //source[4] = -_J[YY]*ovEpsilon;	//y-Ampere's Law
    //source[5] = -_J[ZZ]*ovEpsilon;  	//z-Ampere's Law
    //source[6] = 0;			//y-Ampere's Law
    //source[7] = 0;  			//z-Ampere's Law
  //}
  
  //AAL: Here the source for Maxwell equations
  //if (nbEqs == totalNbEqs || iEqSS == 1) {
    // AAL: Call to the functions needed to compute the source in the fluid equations
    //computeMassReactionsEnergySourceTerm();
    //computeCollisionalMomentumEnergy();
    
    //AAL: The following should be changed for the 3 Fluid case
    /// FLUID EQUATIONS
      //AAL: CONTINUITY
      //const CFreal massSource_i = _massSource[0];
      //const CFreal massSource_n = _massSource[1];
      //source[8] = massSource_i;					// Ions continuity equation
      //source[9] = massSource_n;					// Neutrals continuity equation
      
      //AAL: MOMENTUM
      //const CFreal emMomentumX = _J[YY]*_Btotal[ZZ] - _J[ZZ]*_Btotal[YY];		//Electromagnetic momentum X
      //const CFreal emMomentumY = _J[ZZ]*_Btotal[XX] - _J[XX]*_Btotal[ZZ];		//Electromagnetic momentum Y
      
      //const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);  
      //const CFreal ui = _physicalData[firstVelocity];
      //const CFreal vi = _physicalData[firstVelocity + 1];
      //const CFreal un = _physicalData[firstVelocity + 2];
      //const CFreal vn = _physicalData[firstVelocity + 3];
      //const CFreal GammaIon_i = - _GammaIon_n;
      //const CFreal GammaRec_n = - _GammaRec_i;
      //const CFreal mi = 1.6726e-27;  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
      //const CFreal mn = 1.6726e-27;  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
      //const CFreal collMomentumSource_ix = _collMomentumSource[0];
      //const CFreal collMomentumSource_iy = _collMomentumSource[1];
      //const CFreal collMomentumSource_nx = _collMomentumSource[2];
      //const CFreal collMomentumSource_ny = _collMomentumSource[3];
      
      //source[10] = emMomentumX + collMomentumSource_ix + GammaIon_i*mi*un - GammaRec_n*mi*ui; //Ions X momentum
      //source[11] = emMomentumY + collMomentumSource_iy + GammaIon_i*mi*vn - GammaRec_n*mi*vi; //Ions Y momentum
      
      //source[12] = collMomentumSource_nx - GammaIon_i*mi*un + GammaRec_n*mi*ui; //Neutrals X momentum
      //source[13] = collMomentumSource_ny - GammaIon_i*mi*vn + GammaRec_n*mi*vi; //Neutrals Y momentum
      
      //AAL: ENERGY
      //const CFreal emEnergy = _J[XX]*_Etotal[XX] + _J[YY]*_Etotal[YY] + _J[ZZ]*_Etotal[ZZ];
      //const CFreal collWorki = _collMomentumSource[0]*ui + _collMomentumSource[1]*vi;
      //const CFreal collWorkn = _collMomentumSource[2]*un + _collMomentumSource[3]*vn;
      //const CFreal EnergyIon = 13.6*1.60217657e-19;							//13.6eV to J
      //const CFreal kinEnerRec_n = 0.5*GammaRec_n*mi*(ui*ui + vi*vi);
      //const CFreal kinEnerIon_i = 0.5*GammaIon_i*mn*(un*un + vn*vn);
      //const CFreal kinEnerIon_e = GammaIon_i*EnergyIon;
      
      //source[14] = emEnergy + collWorki + _collEnergySource[0] + _ReactEnergySource[0] + kinEnerIon_i - kinEnerIon_e - kinEnerRec_n; //Ions Energy
      //source[15] = collWorkn + _collEnergySource[1] + _ReactEnergySource[1] - kinEnerIon_i + kinEnerRec_n; //Neutrals Energy
      
      // AAL: Write the sockets
      //if (!this->getMethodData().isPerturb()) { // Condition to avoid writing when the source is perturbed
        //if(currState->isParUpdatable()) { // Condition to write only once the partition cells
          //GammaIon[elemID] = _GammaIon_n;
          //GammaRec[elemID] = _GammaRec_i;
        //}
      //}
  //}
  // AAL: Don't forget to multiply by the volume!!!!!
  //source *= volumes[elemID];
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeMassReactionsEnergySourceTerm()
{
  //************************************************************
  // AAL: This is the function where we compute _GammaIon_n, _GammaRec_i, _massSource[] and _ReactEnergySource
  //************************************************************

  //_GammaIon_n = 0.;
  //_GammaRec_i = 0.;
  
  //const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  //const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
  
  //const CFreal rho  = _physicalData[UPDATEVAR::PTERM::RHO];
  //const CFreal rhoi = rho*_physicalData[firstDensity]; 		// ions density
  //const CFreal rhon = rho*_physicalData[firstDensity + 1];	// neutrals density
  //const CFreal Ti   = _physicalData[firstTemperature];	        // ions Temperature
  //const CFreal Tn   = _physicalData[firstTemperature + 4];      // neutrals Temperature
  
  ////Molecular Masses
  //const CFreal me = 9.1094e-31;              // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  //const CFreal mi = 1.6726e-27;              // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  //const CFreal mn = 1.6726e-27;              // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
  
  ////electron properties
  //const CFreal ne = rhoi/mi;		   	// Electrically neutral, i.e. ne = ni
  //const CFreal Te = Ti/11604.50520;		// electrons temperature in eV. Thermal equilibrium is assumed Ti = Te
  
  ////Neutrals and ions properties
  //const CFreal nn = rhon/mn;			// neutral particle per unit volume
  //const CFreal ni = ne;			        // ion particle per unit volume
  
  //// IONIZATION
  ////constants Related to ionization frequency from [Leake]
  //const CFreal A = 2.91e-14;
  //const CFreal X = 0.232;
  //const CFreal psiIonOvTe = 13.6/Te;
  //const CFreal K = 0.39;
  
  //const CFreal nuIon = ne*A/(X + psiIonOvTe)*std::pow(psiIonOvTe, K)*std::exp(-psiIonOvTe);  // Ionization freq.
  //_GammaIon_n = -nn*nuIon;
  
  //// RECOMBINATION
  ////constant related to recombination
  //const CFreal B = 2.6e-19;
  //const CFreal nuRec = ne/std::sqrt(Te)*B;
  //_GammaRec_i = -ni*nuRec;
  
  ////TOTAL (particles/m3)
  //const CFreal ionsParticlesRate     = (-_GammaIon_n + _GammaRec_i);
  //const CFreal neutralsParticlesRate = (_GammaIon_n - _GammaRec_i);
  
  ////RESULT
  //_massSource[0] = mi*ionsParticlesRate;
  //_massSource[1] = mn*neutralsParticlesRate;
  
  //const CFreal kB = Framework::PhysicalConsts::Boltzmann(); // Boltzmann constant
  //const CFreal GammaIon_i = - _GammaIon_n;
  //const CFreal GammaRec_n = - _GammaRec_i;
  
  //const CFreal Qion_i = 1.5*GammaIon_i*kB*Tn;
  //const CFreal Qrec_n = 1.5*GammaRec_n*kB*Ti;
  
  //_ReactEnergySource[0] = Qion_i - Qrec_n;   //IONS
  //_ReactEnergySource[1] = -Qion_i + Qrec_n;  //NEUTRALS
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeElectricCurrent()
{
  //************************************************************
  // AAL: This is the function where we compute the total current, _J[]
  //************************************************************

  //const CFreal firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  
  //// Total Electromagnetic Field
  //_Btotal[XX] = _physicalData[UPDATEVAR::PTERM::BX] + _NonInducedEMField[0];
  //_Btotal[YY] = _physicalData[UPDATEVAR::PTERM::BY] + _NonInducedEMField[1];
  //_Btotal[ZZ] = _physicalData[UPDATEVAR::PTERM::BZ] + _NonInducedEMField[2];
 // _Etotal[XX] = _physicalData[UPDATEVAR::PTERM::EX] + _NonInducedEMField[3];
 // _Etotal[YY] = _physicalData[UPDATEVAR::PTERM::EY] + _NonInducedEMField[4];
 // _Etotal[ZZ] = _physicalData[UPDATEVAR::PTERM::EZ] + _NonInducedEMField[5];
  
  //// Ion velocities
  //const CFreal ui = _physicalData[firstVelocity];
 // const CFreal vi = _physicalData[firstVelocity + 1];
  
  //const CFreal eta = _electricalResistivity;
  //const CFreal sigma = 1/eta;
  
  //const CFreal Jx = sigma*(_Etotal[XX] + vi*_Btotal[ZZ]);
  //const CFreal Jy = sigma*(_Etotal[YY] - ui*_Btotal[ZZ]);
  //const CFreal Jz = sigma*(_Etotal[ZZ] + ui*_Btotal[YY] - vi*_Btotal[XX]);
  
  //_J[XX] = Jx;
  //_J[YY] = Jy;
  //_J[ZZ] = Jz;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST2D<UPDATEVAR>::computeCollisionalMomentumEnergy()
{
  //************************************************************
  // AAL: This is the function where we compute the _collMomentumSource[] and _collEnergySource[]
  //************************************************************

  //const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  //const CFreal firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  //const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
  
  //// particles density, temperature
  //const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  //const CFreal rhoi = rho*_physicalData[firstDensity]; 			//ions density
  //const CFreal rhon = rho*_physicalData[firstDensity + 1]; 		//neutrals density
  
  //const CFreal Ti = _physicalData[firstTemperature];
  //const CFreal Tn = _physicalData[firstTemperature + 4];
  
  //const CFreal ui = _physicalData[firstVelocity];
  //const CFreal vi = _physicalData[firstVelocity + 1];
  //const CFreal un = _physicalData[firstVelocity + 2];
  //const CFreal vn = _physicalData[firstVelocity + 3];
  
  //// particle mass
  //const CFreal mi = 1.6726e-27;  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  //const CFreal mn = 1.6726e-27;  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
  
  //// particles per volume
  //const CFreal ni = rhoi/mi;
  //const CFreal nn = rhon/mn;
  
  ////parameters
  //const CFreal m_in = mi*mn/(mi + mn);
  //const CFreal Sigma_in = 1.41e-19;		//collisional cross-section m2 [Leake]
  //const CFreal T_in = (Ti + Tn)/2;
  //const CFreal kB = Framework::PhysicalConsts::Boltzmann(); // Boltzmann constant
  //const CFreal pi = MathTools::MathConsts::CFrealPi(); //Pi number
  
  ////collision Frequency
  //const CFreal nu_in = nn*Sigma_in*std::sqrt(8.*kB*T_in/(pi*m_in));
  //const CFreal m_n_nu = m_in*ni*nu_in;
  //const CFreal Rin_ix = m_n_nu*(un - ui);
  //const CFreal Rin_iy = m_n_nu*(vn - vi);
  
  ////ions momentum
  //_collMomentumSource[0] = Rin_ix;
  //_collMomentumSource[1] = Rin_iy;
  
  ////neutrals momentum
  //_collMomentumSource[2] = -Rin_ix;
  //_collMomentumSource[3] = -Rin_iy;
  
  //const CFreal kinEnergin_i = 0.5*(Rin_ix*(un - ui) + Rin_iy*(vn - vi)); //exchange due to different kinetic energy
  //const CFreal intEnergin_i = 3.*m_n_nu/mi*kB*(Tn - Ti); // exchange due to different temperatures
  //const CFreal Qin_i = kinEnergin_i + intEnergin_i;  // source in ions energy due to collisions with neutrals
  
  //_collEnergySource[0] = Qin_i;	  // IONS
  //_collEnergySource[1] = -Qin_i;  // NEUTRALS

}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
