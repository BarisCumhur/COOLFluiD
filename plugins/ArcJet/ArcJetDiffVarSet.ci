#include "Framework/PhysicalChemicalLibrary.hh"
#include "NavierStokes/EulerTerm.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace ArcJet {

//////////////////////////////////////////////////////////////////////////////

template <typename BASEVS, typename ST>
ArcJetDiffVarSet<BASEVS, ST>::ArcJetDiffVarSet
(const std::string& name,
 Common::SafePtr<Framework::PhysicalModelImpl> model) :
  BASEVS(name, model),
  m_arcJetReactionTerm(model->getSourceTerm().d_castTo<ST>()),
  m_library(CFNULL),
  _eulerModelLTE(model->getConvectiveTerm().template d_castTo<NavierStokes::EulerTerm>())
{
  this->addVarName("Phi");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASEVS, typename ST>
ArcJetDiffVarSet<BASEVS, ST>::~ArcJetDiffVarSet()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASEVS, typename ST>
void ArcJetDiffVarSet<BASEVS, ST>::setup()
{
  BASEVS::setup();
    
  using namespace COOLFluiD::Framework;
  
  m_library = PhysicalModelStack::getActive()->getImplementor()->
    getPhysicalPropertyLibrary<PhysicalChemicalLibrary>();  
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASEVS, typename ST>
RealVector& ArcJetDiffVarSet<BASEVS, ST>::getFlux
(const RealVector& values,
 const std::vector<RealVector*>& gradients,
 const RealVector& normal,
 const CFreal& radius)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
	
  const CFuint nbEqs =
    PhysicalModelStack::getActive()->getEquationSubSysDescriptor().getNbEqsSS();

  // here it is assumed that you don't derive from this class (for the moment is
  // a reasonable assumption)
  const CFuint totalNbEqs = this->_flux.size();
  // if more than 2 or all the equations equations are considered
  if (nbEqs > 1 || nbEqs == totalNbEqs) {
    BASEVS::getFlux(values,gradients,normal,radius);
  }
  
  // if only the last two equations or all the equations are considered
  if (nbEqs == 1 || nbEqs == totalNbEqs) {
    // AL: not generic this assumes [p v T] variables !!!    
    CFreal Tdim = values[this->_TID];
    cf_assert(Tdim > 0.01);
    cf_assert(this->_TID > 0);  
    CFreal pdim = _eulerModelLTE->getPressureFromState(values[0]);
    cf_assert(pdim > 0.01);
    /* Access the mutation library to get sigma*/
    CFreal* tVec = CFNULL;
    const CFreal sigma = m_library->sigma(Tdim, pdim, tVec);
    //     CFout <<"DiffVarSet::T     = " << Tdim <<"\n";
    //     CFout <<"DiffVarSet::p     = " << pdim <<"\n";    
    //     CFout <<"DiffVarSet::sigma = "<< sigma <<"\n";
    //    const CFreal sigma = 490; 							//WATCH OUT: only for debugging purposes
    //     const CFreal mu = m_library->eta(Tdim, pdim, tVec);				//WATCH OUT: only for debugging purposes
    //     const CFreal density = m_library->density(Tdim,pdim);			//WATCH OUT: only for debugging purposes
    //     cout << "DynViscosity = " << mu << endl;					//WATCH OUT: only for debugging purposes
    //     cout << "Density      = " << density << endl;				//WATCH OUT: only for debugging purposes
    const CFuint phiID = totalNbEqs - 1;
    const RealVector& gradPhi = *gradients[phiID];
    const CFuint dim    = PhysicalModelStack::getActive()->getDim(); 
    
    this->_flux[phiID] = 0.0;
    // AL: double check the sign
    for (CFuint i = 0; i < dim ; ++i) {
      this->_flux[phiID] += sigma*gradPhi[i]*normal[i];
    }
  }
  
  return this->_flux;
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASEVS, typename ST>
CFreal ArcJetDiffVarSet<BASEVS, ST>::getCurrUpdateDiffCoeff(CFuint iEqSS)
{
  if (iEqSS == 0) {
    return BASEVS::getCurrUpdateDiffCoeff(iEqSS);
  }
  return 0.0;
}

//////////////////////////////////////////////////////////////////////////////

} // namespace ArcJet

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
