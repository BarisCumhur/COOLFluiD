namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void SubInletEuler2DPuvtUVT<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >("Vx","x velocity");
  options.template addConfigOption< CFreal >("Vy","y velocity");
  options.template addConfigOption< CFreal >("T","static temperature");
  options.template addConfigOption< std::vector<std::string> >("Vars","Definition of the Variables.");
  options.template addConfigOption< std::vector<std::string> >("Def","Definition of the Functions.");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
SubInletEuler2DPuvtUVT<UPDATEVAR>::SubInletEuler2DPuvtUVT(const std::string& name) :
  FVMCC_BC(name),
  _useFunction(false),
  _uvT(3),
  _uvTRef(3),
  _bCoord()
{
  addConfigOptionsTo(this);

  _uinf = 0.0;
  setParameter("Vx",&_uinf);

  _vinf = 0.0;
  setParameter("Vy",&_vinf);

  _temperature = 0.0;
  setParameter("T",&_temperature);

  _functions = std::vector<std::string>();
  setParameter("Def",&_functions);

  _vars = std::vector<std::string>();
  setParameter("Vars",&_vars);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
SubInletEuler2DPuvtUVT<UPDATEVAR>::~SubInletEuler2DPuvtUVT()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void SubInletEuler2DPuvtUVT<UPDATEVAR>::configure ( Config::ConfigArgs& args )
{
  using namespace COOLFluiD::Framework;

  FVMCC_BC::configure(args);

  if(!_functions.empty())
    {
    _vFunction.setFunctions(_functions);
    _vFunction.setVariables(_vars);
    try {
      _vFunction.parse();
      _useFunction = true;
    }
    catch (Common::ParserException& e) {
      CFout << e.what() << "\n";
      throw; // retrow the exception to signal the error to the user
    }
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void SubInletEuler2DPuvtUVT<UPDATEVAR>::setGhostState(Framework::GeometricEntity *const face)
{
  using namespace std;
  using namespace COOLFluiD::Framework;

  State *const innerState = face->getState(0);
  State *const ghostState = face->getState(1);

  if(_useFunction)
  {
    // coordinate of the boundary point
    _bCoord = (innerState->getCoordinates() +
               ghostState->getCoordinates());
    _bCoord *= 0.5;

    // (*ghostState) = 2*bcState - (*innerState)
    _vFunction.evaluate(_bCoord, _uvT);

    _uvT[0] /= _uvTRef[0];
    _uvT[1] /= _uvTRef[1];
    _uvT[2] /= _uvTRef[2];
  }
  else {
    _uvT[0] = _uinf;
    _uvT[1] = _vinf;
    _uvT[2] = _temperature;
  }

  (*ghostState)[0] = (*innerState)[0];
  (*ghostState)[1] = 2.*_uvT[0] - (*innerState)[1];
  (*ghostState)[2] = 2.*_uvT[1] - (*innerState)[2];
  (*ghostState)[3] = 2.*_uvT[2] - (*innerState)[3];
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void SubInletEuler2DPuvtUVT<UPDATEVAR>::setup()
{
  using namespace COOLFluiD::Framework;

  FVMCC_BC::setup();

  _bCoord.resize(PhysicalModelStack::getActive()->getDim());

  Common::SafePtr<UPDATEVAR> varSet =
    getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();

  cf_assert(varSet.isNotNull());

  _uvTRef[0] = varSet->getModel()->getVelRef();
  _uvTRef[1] = varSet->getModel()->getVelRef();
  _uvTRef[2] = varSet->getModel()->getTempRef();

  _uinf /= _uvTRef[0];
  _vinf /= _uvTRef[1];
  _temperature /= _uvTRef[2];
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
