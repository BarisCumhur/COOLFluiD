#include "Framework/EquationSetData.hh"
#include "MathTools/MathConsts.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {
  namespace Numerics {
    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////
// This sets the constants that are read by the CFcase. The values below are 
// the default values, used in case they're not set in the CFcase
template <class UPDATEVAR>
AUSMPlusFlux_MpW<UPDATEVAR>::AUSMPlusFlux_MpW(const std::string& name) :
  AUSMFlux<UPDATEVAR>(name)
{
  this->addConfigOptionsTo(this);
  m_beta = 1./8.; this->setParameter("beta",&m_beta);		//beta(AUSM+) is normally 1/8
  m_alpha = -3./4.; this->setParameter("alpha",&m_alpha);	//alpha(AUSM+) is normally 3/16
  m_Vinf = 10.; this->setParameter("Vinf",&m_Vinf); 		// V(infinite)
  m_Lref = 0.04; this->setParameter("Lref",&m_Lref);		// L reference = shortest cell length
  m_nu = 0.0000181; this->setParameter("nu",&m_nu);		// nu, dynamic viscosity
  m_ChoiceLref = 0; this->setParameter("ChoiceLref",&m_ChoiceLref);// Choice of method to compute Lref
  m_ChoiceMp = 0; this->setParameter("ChoiceMp", &m_ChoiceMp);	// Choice of method to compute mp
  m_uco = 1.; this->setParameter("uco", &m_uco);		// cut-off speed
  m_umax = 340.; this->setParameter("umax", &m_umax);		// upper bound speed
  m_Ml=0.5; this->setParameter("Ml",&m_Ml);			// limit Mach number for weigthing function of mp
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
AUSMPlusFlux_MpW<UPDATEVAR>::~AUSMPlusFlux_MpW()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMPlusFlux_MpW<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >
	("Vinf","Vinfinite");
  options.template addConfigOption< CFreal >
	("Lref","reference length, smallest cell size");
  options.template addConfigOption< CFreal >
	("nu","dynamic viscosity");
  options.template addConfigOption< CFuint >
	("ChoiceLref","Choice of method to compute Lref");
  options.template addConfigOption< CFuint >
	("ChoiceMp","Choice of method to compute mp");
  options.template addConfigOption< CFreal >
	("uco","cut-off speed");
  options.template addConfigOption<CFreal>
	("umax","upper bound speed");  
  options.template addConfigOption< CFreal >
    	("beta"," -1/16 <= beta coefficient <= 1/2.");
  options.template addConfigOption< CFreal >
   	("alpha"," -3/4 <= beta coefficient <= 3/16.");
  options.template addConfigOption< CFreal >
	("Ml","M limit weight function");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMPlusFlux_MpW<UPDATEVAR>::computeMassFlux()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  this->computeInterfaceSoundSpeed(); // m_a12

  // calculation of the Mach number for the left and the right states
  this->m_mL = this->m_unL/this->m_a12;
  this->m_mR = this->m_unR/this->m_a12;
  const CFreal mL = this->m_mL;
  const CFreal mR = this->m_mR;

  const CFreal M4Plus = (std::abs(mL) >= 1.0) ? this->mach1Plus(mL) :
    this->mach2Plus(mL) + m_beta*pow(mL*mL - 1.0, 2.);

  const CFreal M4Minus = (std::abs(mR) >= 1.0) ? this->mach1Min(mR) :
    this->mach2Min(mR) - m_beta*pow(mR*mR - 1.0, 2.);

  const CFreal rhoL = (*this->m_lData)[UPDATEVAR::PTERM::RHO];
  const CFreal rhoR = (*this->m_rData)[UPDATEVAR::PTERM::RHO]; 
  
  // calculation of the Mach number at the interface
  const CFreal m12 = M4Plus + M4Minus;
  // calculation of the mass flux at the interface
  this->m_mflux12 = (m12 > 0.0) ? this->m_a12 * m12 * rhoL : this->m_a12 * m12 * rhoR;
}
  
///////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMPlusFlux_MpW<UPDATEVAR>::computeIncompCorrectionTerm()	//this is the mp in Magin's scheme
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;  
  using namespace COOLFluiD::MathTools;  

  const CFreal pL = (*this->m_lData)[UPDATEVAR::PTERM::P];
  const CFreal pR = (*this->m_rData)[UPDATEVAR::PTERM::P];
  const CFreal pdif = pR-pL;					//pressure difference 

  const CFreal rhoL = (*this->m_lData)[UPDATEVAR::PTERM::RHO];
  const CFreal rhoR = (*this->m_rData)[UPDATEVAR::PTERM::RHO];
  const CFreal rhoave = 0.5*(rhoL+rhoR);			//average density  

//choice of the method for the computation of Re(cell)
  const CFuint ChoiceLref=m_ChoiceLref;

  CFreal Vvisc = 0.;
if (ChoiceLref>3) {
	cout<<"illegal choice of method to compute Lref. Should be either 0, 1, 2 or 3 and defined in CFcase"<<endl;
	cout<<"the following line should be present in the CFcase:"<<endl;
	cout<<"Simulator.SubSystem.CellCenterFVM.Data.AUSMLowMlimit.ChoiceLref = 1"<<endl;
	cout<<" "<<endl;
	}
else {
	CellCenterFVMData& data = this->getMethodData(); 
	GeometricEntity& face = *data.getCurrentFace();
	const CFreal FaceLength = this->socket_faceAreas.getDataHandle()[face.getID()];
	const State& LState = *face.getState(0);
        const Node& LNode = LState.getCoordinates();
        const State& RState = *face.getState(1);
        const Node& RNode = RState.getCoordinates();
	const CFreal cellCenterDistance=std::sqrt(pow((LNode[0]-RNode[0]),2)+pow((LNode[1]-RNode[1]),2));
 switch(ChoiceLref) {					
	
	case 0:
		Vvisc += m_nu/(rhoave*m_Lref);				//Vvisc is based on a constant Lref (defined in the CFcase)
	break;

	case 1:
		
		Vvisc = m_nu/(rhoave*FaceLength);			//Vvisc is based on the length of the face
	break;

	case 2:
		
		Vvisc = m_nu/(rhoave*std::min(FaceLength,cellCenterDistance));	//Vvisc is based on min(face length, distance between two centers)
	break;
	case 3:

		Vvisc = m_nu/(rhoave*std::max(FaceLength,cellCenterDistance));	//Vvisc is based on max(face length, distance between two centers)
	
		}
	}

//choice of the method for the computation of mp  
  const CFreal uave = (0.5*(this->m_unL+this->m_unR));			//local speed	
  const CFuint ChoiceMp = m_ChoiceMp;					// choice of method to compute Mp
  const CFreal uco = m_uco;						//cut-off speed
  const CFreal umax = m_umax;						//upper bound speed
  const CFreal mL=this->m_mL;						//M left state
  const CFreal mR=this->m_mR;						//M right state
  CFreal mw=std::max(std::abs(mL),std::abs(mR));			//Mach number used in weigthing function is highest Mach
  const CFreal Ml=m_Ml;
	//definition of the weigthing function to weight mp with Mach number
  CFreal w=(mw < Ml) ? -6*pow(Ml,-5)*pow(mw,5)+15*pow(Ml,-4)*pow(mw,4)-10*pow(Ml,-3)*pow(mw,3)+1 :0.; //w=5th order polynome: 1 at M=0, 0 at M=Ml

  switch(ChoiceMp) {

	case 0:
		this->m_mincomp=0.;						//pressure diffusion term switched OFF
	break;

	case 1:
		this->m_mincomp = -w/(std::max(uave,Vvisc))*pdif;		//pressure diffusion term based on local speed
	break;

	case 2:
		this->m_mincomp = -w/(std::max(std::abs(uave),Vvisc))*pdif;	//pressure diffusion term based on abs(local speed)
	break;

	case 3:
		this->m_mincomp = -w/(std::max(m_Vinf,Vvisc))*pdif;		//pressure diffusion term based on V(infinite)
	break;

	case 4:
		const CFreal ustar = std::max(std::abs(uave),Vvisc);
		const CFreal ustar1 = (std::max(ustar,uco));
		const CFreal ustar2 = (std::min(ustar1,umax));		
		this->m_mincomp = -w/ustar2*pdif;		//pressure diffusion term is min(max(local speed, viscous speed, cut-off speed),M=1)
	break;
	}
  }
    
//////////////////////////////////////////////////////////////////////////////
  
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMPlusFlux_MpW<UPDATEVAR>::computePressureFlux()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::MathTools;

  // here in AIAA 2003-4116 there is only "m_fa"
  const CFreal mL = this->m_mL;
  const CFreal mR = this->m_mR;
  const CFreal P5Plus = (std::abs(mL) >= 1.0) ? 0.5*(1+ MathFunctions::sign(mL)) : 
    this->mach2Plus(mL)*(2.0-mL) + m_alpha*mL*pow(mL*mL-1., 2.0);

  const CFreal P5Minus = (std::abs(mR) >= 1.0) ? 0.5*(1- MathFunctions::sign(mR)) : 
    -this->mach2Min(mR)*(2.0+mR) - m_alpha*mR*pow(mR*mR-1., 2.0);

  const CFreal pL = (*this->m_lData)[UPDATEVAR::PTERM::P];
  const CFreal pR = (*this->m_rData)[UPDATEVAR::PTERM::P];
  // calculation of the pressure flux at the interface
  this->m_p12 = P5Plus*pL + P5Minus*pR;
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
