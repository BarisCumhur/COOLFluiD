#include "Framework/MeshData.hh"
#include "Framework/SubSystemStatus.hh"
#include "Framework/NamespaceSwitcher.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::defineConfigOptions(Config::OptionList& options)
{
  options.addConfigOption< std::string >("Interface","Name of the Interface.");
  options.addConfigOption< CFuint >("DefaultIterations","Number of iterations during which to use the default values.");
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::CoupledNoSlipWallIsothermalNSvt_Ghost(const std::string& name) :
  NoSlipWallIsothermalNSvt<MODEL>(name),
  _sockets()
{
  addConfigOptionsTo(this);

  _interfaceName = "";
  this->setParameter("Interface",&_interfaceName);

  _defaultIterations = 0;
  this->setParameter("DefaultIterations",&_defaultIterations);

  _setIndex = false;
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::~CoupledNoSlipWallIsothermalNSvt_Ghost()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::setup()
{
  NoSlipWallIsothermalNSvt<MODEL>::setup();

  ///Store the wall value given by user
  m_wallTempConst = NoSlipWallIsothermalNSvt<MODEL>::m_wallTemp;
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::setIndex()
{

using namespace std;
using namespace COOLFluiD::Framework;
using namespace COOLFluiD::Common;
using namespace COOLFluiD::MathTools;

  ///@todo move this to setup
  Common::SafePtr<TopologicalRegionSet> trs = this->getCurrentTRS();
  const std::string trsName = trs->getName();
  const std::string currentSubSystem = SubSystemStatusStack::getActive()->getSubSystemName();
  const std::string nameSpace = this->getMethodData().getNamespace();

  const std::string baseSocketName =
    "COUPLING_" + _interfaceName + "_" + trsName + "_" + nameSpace + "_" + currentSubSystem + "_Ghost_";

  DataHandle<CFreal> isAccepted =
    _sockets.getSocketSink<CFreal>(baseSocketName + "ISACCEPTED")->getDataHandle();

  const CFuint nbGeosInTRS = trs->getLocalNbGeoEnts();
  _coupledDataID.resize(nbGeosInTRS);
  CFuint idx = 0;
  for(CFuint iGeo=0; iGeo < nbGeosInTRS; ++iGeo)
  {
    if(isAccepted[iGeo] >= 0.)
    {
      _coupledDataID[iGeo] = idx;
      idx++;
    }
    else{
      _coupledDataID[iGeo] = -1;
    }
  }

  _setIndex = true;
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
std::vector<Common::SafePtr<Framework::BaseDataSocketSink> >
CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::needsSockets()
{

  std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > result = NoSlipWallIsothermalNSvt<MODEL>::needsSockets();

//  copy(_sockets.getAllSinkSockets().begin(), _sockets.getAllSinkSockets().end(), back_inserter(result));

  std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > result2 = _sockets.getAllSinkSockets();

  for(CFuint i=0;i<result2.size();++i)
  {
    result.push_back(result2[i]);
  }

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::setGhostState(Framework::GeometricEntity *const face)
{

using namespace std;
using namespace COOLFluiD::Framework;
using namespace COOLFluiD::Common;
using namespace COOLFluiD::MathTools;

  if(!_setIndex) setIndex();

  Common::SafePtr<TopologicalRegionSet> trs = this->getCurrentTRS();

  const CFuint faceID = face->getID();
  const CFuint faceIdx = MeshDataStack::getActive()->getMapGeoToTrs("MapFacesToTrs")->getIdxInTrs(faceID);

  const std::string trsName = trs->getName();
  const std::string currentSubSystem = SubSystemStatusStack::getActive()->getSubSystemName();
  const std::string nameSpace = this->getMethodData().getNamespace();

  const std::string baseSocketName =
    "COUPLING_" + _interfaceName + "_" + trsName + "_" + nameSpace + "_" + currentSubSystem + "_Ghost_";

  DataHandle<RealVector> interfaceData =
    _sockets.getSocketSink<RealVector>(baseSocketName + "DATA")->getDataHandle();
  DataHandle<CFreal> isAccepted =
    _sockets.getSocketSink<CFreal>(baseSocketName + "ISACCEPTED")->getDataHandle();
  DataHandle<RealVector> coordinates =
    _sockets.getSocketSink<RealVector>(baseSocketName + "COORD")->getDataHandle();

  ///Check that the datahandle has same size as the TRS
  cf_assert(isAccepted.size() == trs->getLocalNbGeoEnts());

  CFreal faceWallTemperature;
  if((isAccepted[faceIdx] >= 0.)
      && (SubSystemStatusStack::getActive()->getNbIter() > _defaultIterations))
  {
    cf_assert(_coupledDataID[faceIdx] > -1);
    cf_assert(interfaceData[_coupledDataID[faceIdx]].size() == 1);
    faceWallTemperature = (interfaceData[_coupledDataID[faceIdx]])[0];
  }
  else
  {
    faceWallTemperature = m_wallTempConst;
  }

  faceWallTemperature /= NoSlipWallIsothermalNSvt<MODEL>::m_refTemp;
  NoSlipWallIsothermalNSvt<MODEL>::m_wallTemp = faceWallTemperature;
// CFout << "TempWall: " << faceWallTemperature << "\n";
  NoSlipWallIsothermalNSvt<MODEL>::setGhostState(face);

}

//////////////////////////////////////////////////////////////////////////////

template <class MODEL>
void CoupledNoSlipWallIsothermalNSvt_Ghost<MODEL>::configure ( Config::ConfigArgs& args )
{
  CFAUTOTRACE;

using namespace std;
using namespace COOLFluiD::Framework;
using namespace COOLFluiD::Common;
using namespace COOLFluiD::MathTools;

  NoSlipWallIsothermalNSvt<MODEL>::configure(args);

  const std::string nameSpace = this->getMethodData().getNamespace();
  Common::SafePtr<Namespace> nsp = NamespaceSwitcher::getInstance().getNamespace(nameSpace);
  Common::SafePtr<SubSystemStatus> subsystemStatus = SubSystemStatusStack::getInstance().getEntryByNamespace(nsp);

  const std::string currentSubSystem = subsystemStatus->getSubSystemName();
  const std::vector<std::string> trsNames = this->getTrsNames();

  for(CFuint iTRS = 0; iTRS < trsNames.size(); iTRS++)
  {
    const std::string trsName = trsNames[iTRS];

    const std::string baseSocketName =
      "COUPLING_" + _interfaceName + "_" + trsName + "_" + nameSpace + "_" + currentSubSystem + "_Ghost_";

    _sockets.createSocketSink<CFreal>(baseSocketName + "ISACCEPTED");
    _sockets.createSocketSink<RealVector>(baseSocketName + "DATA");
    _sockets.createSocketSink<RealVector>(baseSocketName + "COORD");
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
