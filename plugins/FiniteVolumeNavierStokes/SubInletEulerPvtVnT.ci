namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class VARSET>
void SubInletEulerPvtVnT<VARSET>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< std::vector<std::string> >("Def","Definition of the Functions.");
}

//////////////////////////////////////////////////////////////////////////////

template <class VARSET>
SubInletEulerPvtVnT<VARSET>::SubInletEulerPvtVnT(const std::string& name) :
  FVMCC_BC(name),
  _varSet(CFNULL),
  _uvwT(),
  _VnT(),
  _uvwTRef(),
  _bCoord(),
  _vars()
{
  addConfigOptionsTo(this);

  _functions = std::vector<std::string>();
  setParameter("Def",&_functions);
}

//////////////////////////////////////////////////////////////////////////////

template <class VARSET>
SubInletEulerPvtVnT<VARSET>::~SubInletEulerPvtVnT()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class VARSET>
void SubInletEulerPvtVnT<VARSET>::configure ( Config::ConfigArgs& args )
{
  using namespace COOLFluiD::Framework;

  FVMCC_BC::configure(args);
}

//////////////////////////////////////////////////////////////////////////////

template <class VARSET>
void SubInletEulerPvtVnT<VARSET>::setGhostState(Framework::GeometricEntity *const face)
{
  using namespace COOLFluiD::Framework;

  State *const innerState = face->getState(0);
  State *const ghostState = face->getState(1);

  const CFuint faceID = face->getID();
  const CFuint startID = faceID*PhysicalModelStack::getActive()->getDim();
  
  DataHandle< CFreal> normals = socket_normals.getDataHandle();

  // coordinate of the boundary point
  _bCoord = (innerState->getCoordinates() + ghostState->getCoordinates());
  _bCoord *= 0.5;

  _vFunction.evaluate(_bCoord, _VnT);

  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const CFuint vtSize = dim + 1;

  CFreal area2 = 0.;
  for (CFuint i = 0; i < dim; ++i) {
    const CFreal nxComp = -normals[startID + i]; //should point inside the flowfield
    _uvwT[i] = nxComp * _VnT[0]; //u,v,w
    area2 += nxComp*nxComp;
  }
  _uvwT /= pow(area2, 0.5);
  _uvwT[dim] = _VnT[1]; //T

  /// @todo this adimensionalization must be checked to be working correctly or not
  _uvwT /= _uvwTRef;

  (*ghostState)[0] = (*innerState)[0];
  for (CFuint i = 0; i < dim; ++i) {
    const CFuint iPlus1 = i+1;
    (*ghostState)[iPlus1] = 2.*_uvwT[i] - (*innerState)[iPlus1];
  }
  (*ghostState)[vtSize] = 2.*_uvwT[dim] - (*innerState)[vtSize];
}

//////////////////////////////////////////////////////////////////////////////

template <class VARSET>
void SubInletEulerPvtVnT<VARSET>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Framework;

  FVMCC_BC::setup();

  _varSet = getMethodData().getUpdateVar().template d_castTo<VARSET>();

  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const CFuint vtSize = dim + 1;

  _uvwT.resize(vtSize);
  _VnT.resize(2);
  _uvwTRef.resize(vtSize);
  _bCoord.resize(dim);

  // set the reference values
  for (CFuint i = 0; i < dim; ++i)
  {
    _uvwTRef[i] = _varSet->getModel()->getVelRef();
  }
  _uvwTRef[dim] = _varSet->getModel()->getTempRef();

  // set up the vectorial functions for u,v,w,T
  _vFunction.setFunctions(_functions);
  _vars.resize(dim);

  _vars[XX] = "x";
  _vars[YY] = "y";
  if (dim == DIM_3D) { _vars[ZZ] = "z"; }

  _vFunction.setVariables(_vars);
  try
  {
    _vFunction.parse();
  }
  catch (Common::ParserException& e)
  {
    CFout << e.what() << "\n";
    throw; // retrow the exception to signal the error to the user
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
