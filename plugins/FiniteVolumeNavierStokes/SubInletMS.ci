namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void SubInletMS<BASE>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< std::vector<CFreal> >("ye", "Scalar Variables"); 
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
SubInletMS<BASE>::SubInletMS(const std::string& name) :
  BASE(name)
{
  this->addConfigOptionsTo(this);
  
  m_ye = std::vector<CFreal>();
  this->setParameter("ye", &m_ye);
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
SubInletMS<BASE>::~SubInletMS()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void SubInletMS<BASE>::configure ( Config::ConfigArgs& args )
{
  using namespace COOLFluiD::Framework;

  BASE::configure(args);
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void SubInletMS<BASE>::setGhostState(Framework::GeometricEntity *const face)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  BASE::setGhostState(face);
  
// unused //  State *const innerState = face->getState(0);
  State *const ghostState = face->getState(1);

  const CFuint nbEqs = PhysicalModelStack::getActive()->getNbEq();
  const CFuint start = nbEqs - m_ye.size();
  for (CFuint i = 0; i < m_ye.size(); ++i) {
  //(*ghostState)[start + i] = 2.*m_ye[i] - (*innerState)[start + i];
  (*ghostState)[start + i] = m_ye[i];
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void SubInletMS<BASE>::setup()
{
  using namespace COOLFluiD::Framework;
  
  BASE::setup();
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
