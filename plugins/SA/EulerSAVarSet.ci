#include "Common/NotImplementedException.hh"
#include "NavierStokes/EulerTerm.hh"
#include "NavierStokes/NSTurbTerm.hh"
#include "Framework/MeshData.hh"

#include "Framework/ConvectiveVarSet.hh"

//////////////////////////////////////////////////////////////////////////////

using namespace COOLFluiD::Framework;
using namespace std;

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace SA {

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
EulerSAVarSet<BASE, SGROUP>::EulerSAVarSet(Common::SafePtr<Framework::BaseTerm> term) :
  BASE(term),
  m_startK(0.),
  m_tmpResult(),
  m_pdatak()
{
  this->addVarName("K");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
EulerSAVarSet<BASE, SGROUP>::~EulerSAVarSet()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::computeEigenValuesVectors(RealMatrix& rightEv,
							    RealMatrix& leftEv,
							    RealVector& eValues,
							    const RealVector& normal)
{
  throw Common::NotImplementedException (FromHere(),"EulerSAVarSet::computeEigenValuesVectors()");
}
      
//////////////////////////////////////////////////////////////////////////////
      
template <typename BASE, CFuint SGROUP>
CFuint EulerSAVarSet<BASE, SGROUP>::getBlockSeparator() const
{
  return Framework::PhysicalModelStack::getActive()->getNbEq();
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::splitJacobian(RealMatrix& jacobPlus,
						RealMatrix& jacobMin,
						RealVector& eValues,
						const RealVector& normal)
{
  throw Common::NotImplementedException (FromHere(),"EulerSAVarSet::splitJacobian()");
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::computePhysicalData(const Framework::State& state,
						      RealVector& data)
{
  BASE::computePhysicalData(state, data);
  
  const CFreal k = state[m_startK]; 
  
  // AL: is this needed? also P,T have to change if they are not variables
  // data[NavierStokes::EulerTerm::H] += k;
  // data[NavierStokes::EulerTerm::E] += k;
  
  const CFuint iK = this->getModel()->getFirstScalarVar(SGROUP);
  data[iK] = k;
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::computeStateFromPhysicalData(const RealVector& data,
							       Framework::State& state)
{
  BASE::computeStateFromPhysicalData(data,state);
  
  const CFuint iK = this->getModel()->getFirstScalarVar(SGROUP);
  state[m_startK] = data[iK];
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
CFreal EulerSAVarSet<BASE, SGROUP>::getSpeed(const Framework::State& state) const 
{
  return BASE::getSpeed(state);
}
  
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::setDimensionalValues(const Framework::State& state,
							   RealVector& result)
{
  BASE::setDimensionalValues(state, result);
  
  const RealVector& refData = this->getModel()->getReferencePhysicalData();
  const CFuint iK = this->getModel()->getFirstScalarVar(SGROUP);
  result[m_startK]   = state[m_startK]*refData[iK];
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::setAdimensionalValues(const Framework::State& state,
							RealVector& result)
{
  BASE::setAdimensionalValues(state, result);
  
  const RealVector& refData = this->getModel()->getReferencePhysicalData();
  const CFuint iK = this->getModel()->getFirstScalarVar(SGROUP);
  result[m_startK]   = state[m_startK]/refData[iK];
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::setDimensionalValuesPlusExtraValues
(const Framework::State& state, RealVector& result, RealVector& extra)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  
  BASE::setDimensionalValuesPlusExtraValues(state, result, extra);
  
  cf_assert(result.size() == state.size());
  
  // back up current array
  const CFuint oldSize = result.size();
  for (CFuint i = 0; i < oldSize; ++i) {
    m_tmpResult[i] = result[i];
  }
  
  //   if (result.size() < state.size()) {
  //     result.resize(oldSize+2);
  //   }
  
  for (CFuint i = 0; i < oldSize; ++i) {
    result[i] = m_tmpResult[i];
  }
    
  computePhysicalData(state, m_pdatak);
  
  const RealVector& refData = this->getModel()->getReferencePhysicalData();
  const CFreal pdim = this->getModel()->getPressureFromState(m_pdatak[EulerTerm::P])*refData[EulerTerm::P];
  const CFreal Tdim = m_pdatak[EulerTerm::T]*refData[EulerTerm::T];
  
  const CFuint iK = this->getModel()->getFirstScalarVar(SGROUP);
  const CFreal Kdim = state[m_startK]*refData[iK];
  result[m_startK] = Kdim;
  
  extra.resize(4);
  
  const CFreal Rdim = this->getModel()->getRdim();
  const CFreal rhodim = pdim/(Rdim*Tdim);
  const CFreal NIUtildadim = Kdim;
  
  SafePtr<NSTurbTerm> nsTurbTerm  =
    PhysicalModelStack::getActive()->getImplementor()->
    getDiffusiveTerm().d_castTo<NSTurbTerm>();
  
  const CFreal mudim = nsTurbTerm->getDynViscosityDim(pdim,Tdim);
  const CFreal NIUdim = mudim / rhodim;
  const CFreal Qsi = NIUtildadim / NIUdim;
  const CFreal Cv1 = 7.1;
  const CFreal fv1 = pow(Qsi,3) / (pow(Qsi,3) + pow(Cv1,3));
  
  extra[0] = NIUtildadim;
  extra[1] = Qsi;
  extra[2] = NIUdim;
  extra[3] = NIUtildadim * fv1;
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
std::vector<std::string> EulerSAVarSet<BASE, SGROUP>::getExtraVarNames() const
{
  vector<std::string> names(4);
  
  names[0] = "NiuTilda";
  names[1] = "Qsi";
  names[2] = "Niu";
  names[3] = "NiuT";
  return names;
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::setup()
{
  BASE::setup();
  
  m_startK = 0;
  for (int i = 0; i < SGROUP; ++i) {
    m_startK += this->getModel()->getNbScalarVars(i);
  }
  
  // AL: check if this is correct
  m_startK += BASE::EULERSET::getEqSetData()[0].size();
  
  const CFuint nbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  m_tmpResult.resize(nbEqs);
  cf_assert(m_startK <= nbEqs-1);
  
  if (EulerSAVarSet<BASE, SGROUP>::getEqSetData().size() == 0) {
    this->addEqSetData(1);
  }
  this->getModel()->resizePhysicalData(m_pdatak);
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE, CFuint SGROUP>
void EulerSAVarSet<BASE, SGROUP>::computePerturbedPhysicalData
(const Framework::State& currState,
 const RealVector& bData,
 RealVector& data,
 CFuint iVar)
{
  cf_assert(iVar < PhysicalModelStack::getActive()->getNbEq());
  
  BASE::computePerturbedPhysicalData(currState, bData, data, iVar);
  
  const CFuint iK = this->getModel()->getFirstScalarVar(SGROUP);
  data[iK]= currState[m_startK];
}

//////////////////////////////////////////////////////////////////////////////

} // namespace SA

} // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
